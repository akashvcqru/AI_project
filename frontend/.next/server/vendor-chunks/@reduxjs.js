"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiProvider: () => (/* binding */ ApiProvider),\n/* harmony export */   NamedSchemaError: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.NamedSchemaError),\n/* harmony export */   QueryStatus: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.QueryStatus),\n/* harmony export */   UNINITIALIZED_VALUE: () => (/* binding */ UNINITIALIZED_VALUE),\n/* harmony export */   _NEVER: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__._NEVER),\n/* harmony export */   buildCreateApi: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.coreModule),\n/* harmony export */   coreModuleName: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.fetchBaseQuery),\n/* harmony export */   reactHooksModule: () => (/* binding */ reactHooksModule),\n/* harmony export */   reactHooksModuleName: () => (/* binding */ reactHooksModuleName),\n/* harmony export */   retry: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.retry),\n/* harmony export */   setupListeners: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.setupListeners),\n/* harmony export */   skipToken: () => (/* reexport safe */ _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/dist/react-redux.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n// src/query/react/index.ts\n\n// src/query/react/module.ts\n\n\n\n// src/query/utils/capitalize.ts\nfunction capitalize(str) {\n    return str.replace(str[0], str[0].toUpperCase());\n}\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n    let count = 0;\n    for(const _key in obj){\n        count++;\n    }\n    return count;\n}\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n    return e.type === \"query\" /* query */ ;\n}\nfunction isMutationDefinition(e) {\n    return e.type === \"mutation\" /* mutation */ ;\n}\nfunction isInfiniteQueryDefinition(e) {\n    return e.type === \"infinitequery\" /* infinitequery */ ;\n}\n// src/query/tsHelpers.ts\nfunction safeAssign(target, ...args) {\n    return Object.assign(target, ...args);\n}\n// src/query/react/buildHooks.ts\n\n\n\n\n// src/query/react/constants.ts\nvar UNINITIALIZED_VALUE = Symbol();\n// src/query/react/useSerializedStableValue.ts\n\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\n    const incoming = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            queryArgs,\n            serialized: typeof queryArgs == \"object\" ? serialize({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            }) : queryArgs\n        }), [\n        queryArgs,\n        serialize,\n        endpointDefinition,\n        endpointName\n    ]);\n    const cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(incoming);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (cache.current.serialized !== incoming.serialized) {\n            cache.current = incoming;\n        }\n    }, [\n        incoming\n    ]);\n    return cache.current.serialized === incoming.serialized ? cache.current.queryArgs : queryArgs;\n}\n// src/query/react/useShallowStableValue.ts\n\n\nfunction useShallowStableValue(value) {\n    const cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache.current, value)) {\n            cache.current = value;\n        }\n    }, [\n        value\n    ]);\n    return (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual)(cache.current, value) ? cache.current : value;\n}\n// src/query/react/buildHooks.ts\nvar canUseDOM = ()=>!!( false && 0);\nvar isDOM = /* @__PURE__ */ canUseDOM();\nvar isRunningInReactNative = ()=>typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\nvar isReactNative = /* @__PURE__ */ isRunningInReactNative();\nvar getUseIsomorphicLayoutEffect = ()=>isDOM || isReactNative ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nvar useIsomorphicLayoutEffect = /* @__PURE__ */ getUseIsomorphicLayoutEffect();\nvar noPendingQueryStateSelector = (selected)=>{\n    if (selected.isUninitialized) {\n        return {\n            ...selected,\n            isUninitialized: false,\n            isFetching: true,\n            isLoading: selected.data !== void 0 ? false : true,\n            status: _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.QueryStatus.pending\n        };\n    }\n    return selected;\n};\nfunction pick(obj, ...keys) {\n    const ret = {};\n    keys.forEach((key)=>{\n        ret[key] = obj[key];\n    });\n    return ret;\n}\nvar COMMON_HOOK_DEBUG_FIELDS = [\n    \"data\",\n    \"status\",\n    \"isLoading\",\n    \"isSuccess\",\n    \"isError\",\n    \"error\"\n];\nfunction buildHooks({ api, moduleOptions: { batch, hooks: { useDispatch, useSelector, useStore }, unstable__sideEffectsInRender, createSelector }, serializeQueryArgs, context }) {\n    const usePossiblyImmediateEffect = unstable__sideEffectsInRender ? (cb)=>cb() : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n    return {\n        buildQueryHooks,\n        buildInfiniteQueryHooks,\n        buildMutationHook,\n        usePrefetch\n    };\n    function queryStatePreSelector(currentState, lastResult, queryArgs) {\n        if (lastResult?.endpointName && currentState.isUninitialized) {\n            const { endpointName } = lastResult;\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            if (queryArgs !== _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken && serializeQueryArgs({\n                queryArgs: lastResult.originalArgs,\n                endpointDefinition,\n                endpointName\n            }) === serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            })) lastResult = void 0;\n        }\n        let data = currentState.isSuccess ? currentState.data : lastResult?.data;\n        if (data === void 0) data = currentState.data;\n        const hasData = data !== void 0;\n        const isFetching = currentState.isLoading;\n        const isLoading = (!lastResult || lastResult.isLoading || lastResult.isUninitialized) && !hasData && isFetching;\n        const isSuccess = currentState.isSuccess || hasData && (isFetching && !lastResult?.isError || currentState.isUninitialized);\n        return {\n            ...currentState,\n            data,\n            currentData: currentState.data,\n            isFetching,\n            isLoading,\n            isSuccess\n        };\n    }\n    function infiniteQueryStatePreSelector(currentState, lastResult, queryArgs) {\n        if (lastResult?.endpointName && currentState.isUninitialized) {\n            const { endpointName } = lastResult;\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            if (queryArgs !== _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken && serializeQueryArgs({\n                queryArgs: lastResult.originalArgs,\n                endpointDefinition,\n                endpointName\n            }) === serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            })) lastResult = void 0;\n        }\n        let data = currentState.isSuccess ? currentState.data : lastResult?.data;\n        if (data === void 0) data = currentState.data;\n        const hasData = data !== void 0;\n        const isFetching = currentState.isLoading;\n        const isLoading = (!lastResult || lastResult.isLoading || lastResult.isUninitialized) && !hasData && isFetching;\n        const isSuccess = currentState.isSuccess || isFetching && hasData;\n        return {\n            ...currentState,\n            data,\n            currentData: currentState.data,\n            isFetching,\n            isLoading,\n            isSuccess\n        };\n    }\n    function usePrefetch(endpointName, defaultOptions) {\n        const dispatch = useDispatch();\n        const stableDefaultOptions = useShallowStableValue(defaultOptions);\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((arg, options)=>dispatch(api.util.prefetch(endpointName, arg, {\n                ...stableDefaultOptions,\n                ...options\n            })), [\n            endpointName,\n            dispatch,\n            stableDefaultOptions\n        ]);\n    }\n    function useQuerySubscriptionCommonImpl(endpointName, arg, { refetchOnReconnect, refetchOnFocus, refetchOnMountOrArgChange, skip = false, pollingInterval = 0, skipPollingIfUnfocused = false, ...rest } = {}) {\n        const { initiate } = api.endpoints[endpointName];\n        const dispatch = useDispatch();\n        const subscriptionSelectorsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n        if (!subscriptionSelectorsRef.current) {\n            const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n            if (true) {\n                if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n                    throw new Error( false ? 0 : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!`);\n                }\n            }\n            subscriptionSelectorsRef.current = returnedValue;\n        }\n        const stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with\n        // a consistent return value, _here_ we want to use the default behavior\n        // so we can tell if _anything_ actually changed. Otherwise, we can end up\n        // with a case where the query args did change but the serialization doesn't,\n        // and then we never try to initiate a refetch.\n        _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.defaultSerializeQueryArgs, context.endpointDefinitions[endpointName], endpointName);\n        const stableSubscriptionOptions = useShallowStableValue({\n            refetchOnReconnect,\n            refetchOnFocus,\n            pollingInterval,\n            skipPollingIfUnfocused\n        });\n        const initialPageParam = rest.initialPageParam;\n        const stableInitialPageParam = useShallowStableValue(initialPageParam);\n        const promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n        let { queryCacheKey, requestId } = promiseRef.current || {};\n        let currentRenderHasSubscription = false;\n        if (queryCacheKey && requestId) {\n            currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);\n        }\n        const subscriptionRemoved = !currentRenderHasSubscription && promiseRef.current !== void 0;\n        usePossiblyImmediateEffect(()=>{\n            if (subscriptionRemoved) {\n                promiseRef.current = void 0;\n            }\n        }, [\n            subscriptionRemoved\n        ]);\n        usePossiblyImmediateEffect(()=>{\n            const lastPromise = promiseRef.current;\n            if (typeof process !== \"undefined\" && \"development\" === \"removeMeOnCompilation\") {}\n            if (stableArg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken) {\n                lastPromise?.unsubscribe();\n                promiseRef.current = void 0;\n                return;\n            }\n            const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n            if (!lastPromise || lastPromise.arg !== stableArg) {\n                lastPromise?.unsubscribe();\n                const promise = dispatch(initiate(stableArg, {\n                    subscriptionOptions: stableSubscriptionOptions,\n                    forceRefetch: refetchOnMountOrArgChange,\n                    ...isInfiniteQueryDefinition(context.endpointDefinitions[endpointName]) ? {\n                        initialPageParam: stableInitialPageParam\n                    } : {}\n                }));\n                promiseRef.current = promise;\n            } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n                lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n            }\n        }, [\n            dispatch,\n            initiate,\n            refetchOnMountOrArgChange,\n            stableArg,\n            stableSubscriptionOptions,\n            subscriptionRemoved,\n            stableInitialPageParam,\n            endpointName\n        ]);\n        return [\n            promiseRef,\n            dispatch,\n            initiate,\n            stableSubscriptionOptions\n        ];\n    }\n    function buildUseQueryState(endpointName, preSelector) {\n        const useQueryState = (arg, { skip = false, selectFromResult } = {})=>{\n            const { select } = api.endpoints[endpointName];\n            const stableArg = useStableQueryArgs(skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken : arg, serializeQueryArgs, context.endpointDefinitions[endpointName], endpointName);\n            const lastValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n            const selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>// Normally ts-ignores are bad and should be avoided, but we're\n                // already casting this selector to be `Selector<any>` anyway,\n                // so the inconsistencies don't matter here\n                // @ts-ignore\n                createSelector([\n                    // @ts-ignore\n                    select(stableArg),\n                    (_, lastResult)=>lastResult,\n                    (_)=>stableArg\n                ], preSelector, {\n                    memoizeOptions: {\n                        resultEqualityCheck: react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual\n                    }\n                }), [\n                select,\n                stableArg\n            ]);\n            const querySelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectFromResult ? createSelector([\n                    selectDefaultResult\n                ], selectFromResult, {\n                    devModeChecks: {\n                        identityFunctionCheck: \"never\"\n                    }\n                }) : selectDefaultResult, [\n                selectDefaultResult,\n                selectFromResult\n            ]);\n            const currentState = useSelector((state)=>querySelector(state, lastValue.current), react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\n            const store = useStore();\n            const newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n            useIsomorphicLayoutEffect(()=>{\n                lastValue.current = newLastValue;\n            }, [\n                newLastValue\n            ]);\n            return currentState;\n        };\n        return useQueryState;\n    }\n    function usePromiseRefUnsubscribeOnUnmount(promiseRef) {\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            return ()=>{\n                promiseRef.current?.unsubscribe?.();\n                promiseRef.current = void 0;\n            };\n        }, [\n            promiseRef\n        ]);\n    }\n    function refetchOrErrorIfUnmounted(promiseRef) {\n        if (!promiseRef.current) throw new Error( false ? 0 : \"Cannot refetch a query that has not been started yet.\");\n        return promiseRef.current.refetch();\n    }\n    function buildQueryHooks(endpointName) {\n        const useQuerySubscription = (arg, options = {})=>{\n            const [promiseRef] = useQuerySubscriptionCommonImpl(endpointName, arg, options);\n            usePromiseRefUnsubscribeOnUnmount(promiseRef);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                    /**\n         * A method to manually refetch data for the query\n         */ refetch: ()=>refetchOrErrorIfUnmounted(promiseRef)\n                }), [\n                promiseRef\n            ]);\n        };\n        const useLazyQuerySubscription = ({ refetchOnReconnect, refetchOnFocus, pollingInterval = 0, skipPollingIfUnfocused = false } = {})=>{\n            const { initiate } = api.endpoints[endpointName];\n            const dispatch = useDispatch();\n            const [arg, setArg] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(UNINITIALIZED_VALUE);\n            const promiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n            const stableSubscriptionOptions = useShallowStableValue({\n                refetchOnReconnect,\n                refetchOnFocus,\n                pollingInterval,\n                skipPollingIfUnfocused\n            });\n            usePossiblyImmediateEffect(()=>{\n                const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n                if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n                    promiseRef.current?.updateSubscriptionOptions(stableSubscriptionOptions);\n                }\n            }, [\n                stableSubscriptionOptions\n            ]);\n            const subscriptionOptionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(stableSubscriptionOptions);\n            usePossiblyImmediateEffect(()=>{\n                subscriptionOptionsRef.current = stableSubscriptionOptions;\n            }, [\n                stableSubscriptionOptions\n            ]);\n            const trigger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(arg2, preferCacheValue = false) {\n                let promise;\n                batch(()=>{\n                    promiseRef.current?.unsubscribe();\n                    promiseRef.current = promise = dispatch(initiate(arg2, {\n                        subscriptionOptions: subscriptionOptionsRef.current,\n                        forceRefetch: !preferCacheValue\n                    }));\n                    setArg(arg2);\n                });\n                return promise;\n            }, [\n                dispatch,\n                initiate\n            ]);\n            const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n                if (promiseRef.current?.queryCacheKey) {\n                    dispatch(api.internalActions.removeQueryResult({\n                        queryCacheKey: promiseRef.current?.queryCacheKey\n                    }));\n                }\n            }, [\n                dispatch\n            ]);\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n                return ()=>{\n                    promiseRef?.current?.unsubscribe();\n                };\n            }, []);\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n                if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n                    trigger(arg, true);\n                }\n            }, [\n                arg,\n                trigger\n            ]);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                    trigger,\n                    arg,\n                    {\n                        reset\n                    }\n                ], [\n                trigger,\n                arg,\n                reset\n            ]);\n        };\n        const useQueryState = buildUseQueryState(endpointName, queryStatePreSelector);\n        return {\n            useQueryState,\n            useQuerySubscription,\n            useLazyQuerySubscription,\n            useLazyQuery (options) {\n                const [trigger, arg, { reset }] = useLazyQuerySubscription(options);\n                const queryStateResults = useQueryState(arg, {\n                    ...options,\n                    skip: arg === UNINITIALIZED_VALUE\n                });\n                const info = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                        lastArg: arg\n                    }), [\n                    arg\n                ]);\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                        trigger,\n                        {\n                            ...queryStateResults,\n                            reset\n                        },\n                        info\n                    ], [\n                    trigger,\n                    queryStateResults,\n                    reset,\n                    info\n                ]);\n            },\n            useQuery (arg, options) {\n                const querySubscriptionResults = useQuerySubscription(arg, options);\n                const queryStateResults = useQueryState(arg, {\n                    selectFromResult: arg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken || options?.skip ? void 0 : noPendingQueryStateSelector,\n                    ...options\n                });\n                const debugValue = pick(queryStateResults, ...COMMON_HOOK_DEBUG_FIELDS);\n                (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(debugValue);\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                        ...queryStateResults,\n                        ...querySubscriptionResults\n                    }), [\n                    queryStateResults,\n                    querySubscriptionResults\n                ]);\n            }\n        };\n    }\n    function buildInfiniteQueryHooks(endpointName) {\n        const useInfiniteQuerySubscription = (arg, options = {})=>{\n            const [promiseRef, dispatch, initiate, stableSubscriptionOptions] = useQuerySubscriptionCommonImpl(endpointName, arg, options);\n            const subscriptionOptionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(stableSubscriptionOptions);\n            usePossiblyImmediateEffect(()=>{\n                subscriptionOptionsRef.current = stableSubscriptionOptions;\n            }, [\n                stableSubscriptionOptions\n            ]);\n            const trigger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(arg2, direction) {\n                let promise;\n                batch(()=>{\n                    promiseRef.current?.unsubscribe();\n                    promiseRef.current = promise = dispatch(initiate(arg2, {\n                        subscriptionOptions: subscriptionOptionsRef.current,\n                        direction\n                    }));\n                });\n                return promise;\n            }, [\n                promiseRef,\n                dispatch,\n                initiate\n            ]);\n            usePromiseRefUnsubscribeOnUnmount(promiseRef);\n            const stableArg = useStableQueryArgs(options.skip ? _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with\n            // a consistent return value, _here_ we want to use the default behavior\n            // so we can tell if _anything_ actually changed. Otherwise, we can end up\n            // with a case where the query args did change but the serialization doesn't,\n            // and then we never try to initiate a refetch.\n            _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.defaultSerializeQueryArgs, context.endpointDefinitions[endpointName], endpointName);\n            const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>refetchOrErrorIfUnmounted(promiseRef), [\n                promiseRef\n            ]);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n                const fetchNextPage = ()=>{\n                    return trigger(stableArg, \"forward\");\n                };\n                const fetchPreviousPage = ()=>{\n                    return trigger(stableArg, \"backward\");\n                };\n                return {\n                    trigger,\n                    /**\n           * A method to manually refetch data for the query\n           */ refetch,\n                    fetchNextPage,\n                    fetchPreviousPage\n                };\n            }, [\n                refetch,\n                trigger,\n                stableArg\n            ]);\n        };\n        const useInfiniteQueryState = buildUseQueryState(endpointName, infiniteQueryStatePreSelector);\n        return {\n            useInfiniteQueryState,\n            useInfiniteQuerySubscription,\n            useInfiniteQuery (arg, options) {\n                const { refetch, fetchNextPage, fetchPreviousPage } = useInfiniteQuerySubscription(arg, options);\n                const queryStateResults = useInfiniteQueryState(arg, {\n                    selectFromResult: arg === _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.skipToken || options?.skip ? void 0 : noPendingQueryStateSelector,\n                    ...options\n                });\n                const debugValue = pick(queryStateResults, ...COMMON_HOOK_DEBUG_FIELDS, \"hasNextPage\", \"hasPreviousPage\");\n                (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(debugValue);\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                        ...queryStateResults,\n                        fetchNextPage,\n                        fetchPreviousPage,\n                        refetch\n                    }), [\n                    queryStateResults,\n                    fetchNextPage,\n                    fetchPreviousPage,\n                    refetch\n                ]);\n            }\n        };\n    }\n    function buildMutationHook(name) {\n        return ({ selectFromResult, fixedCacheKey } = {})=>{\n            const { select, initiate } = api.endpoints[name];\n            const dispatch = useDispatch();\n            const [promise, setPromise] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n                    if (!promise?.arg.fixedCacheKey) {\n                        promise?.reset();\n                    }\n                }, [\n                promise\n            ]);\n            const triggerMutation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(arg) {\n                const promise2 = dispatch(initiate(arg, {\n                    fixedCacheKey\n                }));\n                setPromise(promise2);\n                return promise2;\n            }, [\n                dispatch,\n                initiate,\n                fixedCacheKey\n            ]);\n            const { requestId } = promise || {};\n            const selectDefaultResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>select({\n                    fixedCacheKey,\n                    requestId: promise?.requestId\n                }), [\n                fixedCacheKey,\n                promise,\n                select\n            ]);\n            const mutationSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectFromResult ? createSelector([\n                    selectDefaultResult\n                ], selectFromResult) : selectDefaultResult, [\n                selectFromResult,\n                selectDefaultResult\n            ]);\n            const currentState = useSelector(mutationSelector, react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual);\n            const originalArgs = fixedCacheKey == null ? promise?.arg.originalArgs : void 0;\n            const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n                batch(()=>{\n                    if (promise) {\n                        setPromise(void 0);\n                    }\n                    if (fixedCacheKey) {\n                        dispatch(api.internalActions.removeMutationResult({\n                            requestId,\n                            fixedCacheKey\n                        }));\n                    }\n                });\n            }, [\n                dispatch,\n                fixedCacheKey,\n                promise,\n                requestId\n            ]);\n            const debugValue = pick(currentState, ...COMMON_HOOK_DEBUG_FIELDS, \"endpointName\");\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(debugValue);\n            const finalState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                    ...currentState,\n                    originalArgs,\n                    reset\n                }), [\n                currentState,\n                originalArgs,\n                reset\n            ]);\n            return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>[\n                    triggerMutation,\n                    finalState\n                ], [\n                triggerMutation,\n                finalState\n            ]);\n        };\n    }\n}\n// src/query/react/module.ts\nvar reactHooksModuleName = /* @__PURE__ */ Symbol();\nvar reactHooksModule = ({ batch = react_redux__WEBPACK_IMPORTED_MODULE_1__.batch, hooks = {\n    useDispatch: react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch,\n    useSelector: react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector,\n    useStore: react_redux__WEBPACK_IMPORTED_MODULE_1__.useStore\n}, createSelector = reselect__WEBPACK_IMPORTED_MODULE_3__.createSelector, unstable__sideEffectsInRender = false, ...rest } = {})=>{\n    if (true) {\n        const hookNames = [\n            \"useDispatch\",\n            \"useSelector\",\n            \"useStore\"\n        ];\n        let warned = false;\n        for (const hookName of hookNames){\n            if (countObjectKeys(rest) > 0) {\n                if (rest[hookName]) {\n                    if (!warned) {\n                        console.warn(\"As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`\");\n                        warned = true;\n                    }\n                }\n                hooks[hookName] = rest[hookName];\n            }\n            if (typeof hooks[hookName] !== \"function\") {\n                throw new Error( false ? 0 : `When using custom hooks for context, all ${hookNames.length} hooks need to be provided: ${hookNames.join(\", \")}.\nHook ${hookName} was either not provided or not a function.`);\n            }\n        }\n    }\n    return {\n        name: reactHooksModuleName,\n        init (api, { serializeQueryArgs }, context) {\n            const anyApi = api;\n            const { buildQueryHooks, buildInfiniteQueryHooks, buildMutationHook, usePrefetch } = buildHooks({\n                api,\n                moduleOptions: {\n                    batch,\n                    hooks,\n                    unstable__sideEffectsInRender,\n                    createSelector\n                },\n                serializeQueryArgs,\n                context\n            });\n            safeAssign(anyApi, {\n                usePrefetch\n            });\n            safeAssign(context, {\n                batch\n            });\n            return {\n                injectEndpoint (endpointName, definition) {\n                    if (isQueryDefinition(definition)) {\n                        const { useQuery, useLazyQuery, useLazyQuerySubscription, useQueryState, useQuerySubscription } = buildQueryHooks(endpointName);\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            useQuery,\n                            useLazyQuery,\n                            useLazyQuerySubscription,\n                            useQueryState,\n                            useQuerySubscription\n                        });\n                        api[`use${capitalize(endpointName)}Query`] = useQuery;\n                        api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;\n                    }\n                    if (isMutationDefinition(definition)) {\n                        const useMutation = buildMutationHook(endpointName);\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            useMutation\n                        });\n                        api[`use${capitalize(endpointName)}Mutation`] = useMutation;\n                    } else if (isInfiniteQueryDefinition(definition)) {\n                        const { useInfiniteQuery, useInfiniteQuerySubscription, useInfiniteQueryState } = buildInfiniteQueryHooks(endpointName);\n                        safeAssign(anyApi.endpoints[endpointName], {\n                            useInfiniteQuery,\n                            useInfiniteQuerySubscription,\n                            useInfiniteQueryState\n                        });\n                        api[`use${capitalize(endpointName)}InfiniteQuery`] = useInfiniteQuery;\n                    }\n                }\n            };\n        }\n    };\n};\n// src/query/react/index.ts\n\n// src/query/react/ApiProvider.tsx\n\n\n\n\n\n\nfunction ApiProvider(props) {\n    const context = props.context || react_redux__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;\n    const existingContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n    if (existingContext) {\n        throw new Error( false ? 0 : \"Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.\");\n    }\n    const [store] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__.configureStore)({\n            reducer: {\n                [props.api.reducerPath]: props.api.reducer\n            },\n            middleware: (gDM)=>gDM().concat(props.api.middleware)\n        }));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>props.setupListeners === false ? void 0 : (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.setupListeners)(store.dispatch, props.setupListeners), [\n        props.setupListeners,\n        store.dispatch\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, {\n        store,\n        context\n    }, props.children);\n}\n// src/query/react/index.ts\nvar createApi = /* @__PURE__ */ (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.buildCreateApi)((0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_2__.coreModule)(), reactHooksModule());\n //# sourceMappingURL=rtk-query-react.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NamedSchemaError: () => (/* binding */ NamedSchemaError),\n/* harmony export */   QueryStatus: () => (/* binding */ QueryStatus),\n/* harmony export */   _NEVER: () => (/* binding */ _NEVER),\n/* harmony export */   buildCreateApi: () => (/* binding */ buildCreateApi),\n/* harmony export */   copyWithStructuralSharing: () => (/* binding */ copyWithStructuralSharing),\n/* harmony export */   coreModule: () => (/* binding */ coreModule),\n/* harmony export */   coreModuleName: () => (/* binding */ coreModuleName),\n/* harmony export */   createApi: () => (/* binding */ createApi),\n/* harmony export */   defaultSerializeQueryArgs: () => (/* binding */ defaultSerializeQueryArgs),\n/* harmony export */   fakeBaseQuery: () => (/* binding */ fakeBaseQuery),\n/* harmony export */   fetchBaseQuery: () => (/* binding */ fetchBaseQuery),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   setupListeners: () => (/* binding */ setupListeners),\n/* harmony export */   skipToken: () => (/* binding */ skipToken)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var _standard_schema_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @standard-schema/utils */ \"(ssr)/./node_modules/@standard-schema/utils/dist/index.js\");\n// src/query/core/apiState.ts\nvar QueryStatus = /* @__PURE__ */ ((QueryStatus2)=>{\n    QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n    QueryStatus2[\"pending\"] = \"pending\";\n    QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n    QueryStatus2[\"rejected\"] = \"rejected\";\n    return QueryStatus2;\n})(QueryStatus || {});\nfunction getRequestStatusFlags(status) {\n    return {\n        status,\n        isUninitialized: status === \"uninitialized\" /* uninitialized */ ,\n        isLoading: status === \"pending\" /* pending */ ,\n        isSuccess: status === \"fulfilled\" /* fulfilled */ ,\n        isError: status === \"rejected\" /* rejected */ \n    };\n}\n// src/query/core/rtkImports.ts\n\n// src/query/utils/copyWithStructuralSharing.ts\nvar isPlainObject2 = _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n    if (oldObj === newObj || !(isPlainObject2(oldObj) && isPlainObject2(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n        return newObj;\n    }\n    const newKeys = Object.keys(newObj);\n    const oldKeys = Object.keys(oldObj);\n    let isSameObject = newKeys.length === oldKeys.length;\n    const mergeObj = Array.isArray(newObj) ? [] : {};\n    for (const key of newKeys){\n        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n        if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n    }\n    return isSameObject ? oldObj : mergeObj;\n}\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n    let count = 0;\n    for(const _key in obj){\n        count++;\n    }\n    return count;\n}\n// src/query/utils/flatten.ts\nvar flatten = (arr)=>[].concat(...arr);\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n    return new RegExp(`(^|:)//`).test(url);\n}\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n    if (typeof document === \"undefined\") {\n        return true;\n    }\n    return document.visibilityState !== \"hidden\";\n}\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n    return v != null;\n}\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n    return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = (url)=>url.replace(/\\/$/, \"\");\nvar withoutLeadingSlash = (url)=>url.replace(/^\\//, \"\");\nfunction joinUrls(base, url) {\n    if (!base) {\n        return url;\n    }\n    if (!url) {\n        return base;\n    }\n    if (isAbsoluteUrl(url)) {\n        return url;\n    }\n    const delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n    base = withoutTrailingSlash(base);\n    url = withoutLeadingSlash(url);\n    return `${base}${delimiter}${url}`;\n}\n// src/query/utils/getOrInsert.ts\nfunction getOrInsert(map, key, value) {\n    if (map.has(key)) return map.get(key);\n    return map.set(key, value).get(key);\n}\n// src/query/fetchBaseQuery.ts\nvar defaultFetchFn = (...args)=>fetch(...args);\nvar defaultValidateStatus = (response)=>response.status >= 200 && response.status <= 299;\nvar defaultIsJsonContentType = (headers)=>/*applicat*/ /ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\");\nfunction stripUndefined(obj) {\n    if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {\n        return obj;\n    }\n    const copy = {\n        ...obj\n    };\n    for (const [k, v] of Object.entries(copy)){\n        if (v === void 0) delete copy[k];\n    }\n    return copy;\n}\nfunction fetchBaseQuery({ baseUrl, prepareHeaders = (x)=>x, fetchFn = defaultFetchFn, paramsSerializer, isJsonContentType = defaultIsJsonContentType, jsonContentType = \"application/json\", jsonReplacer, timeout: defaultTimeout, responseHandler: globalResponseHandler, validateStatus: globalValidateStatus, ...baseFetchOptions } = {}) {\n    if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n        console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n    }\n    return async (arg, api, extraOptions)=>{\n        const { getState, extra, endpoint, forced, type } = api;\n        let meta;\n        let { url, headers = new Headers(baseFetchOptions.headers), params = void 0, responseHandler = globalResponseHandler ?? \"json\", validateStatus = globalValidateStatus ?? defaultValidateStatus, timeout = defaultTimeout, ...rest } = typeof arg == \"string\" ? {\n            url: arg\n        } : arg;\n        let abortController, signal = api.signal;\n        if (timeout) {\n            abortController = new AbortController();\n            api.signal.addEventListener(\"abort\", abortController.abort);\n            signal = abortController.signal;\n        }\n        let config = {\n            ...baseFetchOptions,\n            signal,\n            ...rest\n        };\n        headers = new Headers(stripUndefined(headers));\n        config.headers = await prepareHeaders(headers, {\n            getState,\n            arg,\n            extra,\n            endpoint,\n            forced,\n            type,\n            extraOptions\n        }) || headers;\n        const isJsonifiable = (body)=>typeof body === \"object\" && ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n        if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n            config.headers.set(\"content-type\", jsonContentType);\n        }\n        if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n            config.body = JSON.stringify(config.body, jsonReplacer);\n        }\n        if (params) {\n            const divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n            const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n            url += divider + query;\n        }\n        url = joinUrls(baseUrl, url);\n        const request = new Request(url, config);\n        const requestClone = new Request(url, config);\n        meta = {\n            request: requestClone\n        };\n        let response, timedOut = false, timeoutId = abortController && setTimeout(()=>{\n            timedOut = true;\n            abortController.abort();\n        }, timeout);\n        try {\n            response = await fetchFn(request);\n        } catch (e) {\n            return {\n                error: {\n                    status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n                    error: String(e)\n                },\n                meta\n            };\n        } finally{\n            if (timeoutId) clearTimeout(timeoutId);\n            abortController?.signal.removeEventListener(\"abort\", abortController.abort);\n        }\n        const responseClone = response.clone();\n        meta.response = responseClone;\n        let resultData;\n        let responseText = \"\";\n        try {\n            let handleResponseError;\n            await Promise.all([\n                handleResponse(response, responseHandler).then((r)=>resultData = r, (e)=>handleResponseError = e),\n                // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n                // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n                responseClone.text().then((r)=>responseText = r, ()=>{})\n            ]);\n            if (handleResponseError) throw handleResponseError;\n        } catch (e) {\n            return {\n                error: {\n                    status: \"PARSING_ERROR\",\n                    originalStatus: response.status,\n                    data: responseText,\n                    error: String(e)\n                },\n                meta\n            };\n        }\n        return validateStatus(response, resultData) ? {\n            data: resultData,\n            meta\n        } : {\n            error: {\n                status: response.status,\n                data: resultData\n            },\n            meta\n        };\n    };\n    async function handleResponse(response, responseHandler) {\n        if (typeof responseHandler === \"function\") {\n            return responseHandler(response);\n        }\n        if (responseHandler === \"content-type\") {\n            responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n        }\n        if (responseHandler === \"json\") {\n            const text = await response.text();\n            return text.length ? JSON.parse(text) : null;\n        }\n        return response.text();\n    }\n}\n// src/query/HandledError.ts\nvar HandledError = class {\n    constructor(value, meta = void 0){\n        this.value = value;\n        this.meta = meta;\n    }\n};\n// src/query/retry.ts\nasync function defaultBackoff(attempt = 0, maxRetries = 5) {\n    const attempts = Math.min(attempt, maxRetries);\n    const timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n    await new Promise((resolve)=>setTimeout((res)=>resolve(res), timeout));\n}\nfunction fail(error, meta) {\n    throw Object.assign(new HandledError({\n        error,\n        meta\n    }), {\n        throwImmediately: true\n    });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = (baseQuery, defaultOptions)=>async (args, api, extraOptions)=>{\n        const possibleMaxRetries = [\n            5,\n            (defaultOptions || EMPTY_OPTIONS).maxRetries,\n            (extraOptions || EMPTY_OPTIONS).maxRetries\n        ].filter((x)=>x !== void 0);\n        const [maxRetries] = possibleMaxRetries.slice(-1);\n        const defaultRetryCondition = (_, __, { attempt })=>attempt <= maxRetries;\n        const options = {\n            maxRetries,\n            backoff: defaultBackoff,\n            retryCondition: defaultRetryCondition,\n            ...defaultOptions,\n            ...extraOptions\n        };\n        let retry2 = 0;\n        while(true){\n            try {\n                const result = await baseQuery(args, api, extraOptions);\n                if (result.error) {\n                    throw new HandledError(result);\n                }\n                return result;\n            } catch (e) {\n                retry2++;\n                if (e.throwImmediately) {\n                    if (e instanceof HandledError) {\n                        return e.value;\n                    }\n                    throw e;\n                }\n                if (e instanceof HandledError && !options.retryCondition(e.value.error, args, {\n                    attempt: retry2,\n                    baseQueryApi: api,\n                    extraOptions\n                })) {\n                    return e.value;\n                }\n                await options.backoff(retry2, options.maxRetries);\n            }\n        }\n    };\nvar retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {\n    fail\n});\n// src/query/core/setupListeners.ts\nvar onFocus = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */ (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n    function defaultHandler() {\n        const handleFocus = ()=>dispatch(onFocus());\n        const handleFocusLost = ()=>dispatch(onFocusLost());\n        const handleOnline = ()=>dispatch(onOnline());\n        const handleOffline = ()=>dispatch(onOffline());\n        const handleVisibilityChange = ()=>{\n            if (window.document.visibilityState === \"visible\") {\n                handleFocus();\n            } else {\n                handleFocusLost();\n            }\n        };\n        if (!initialized) {\n            if (false) {}\n        }\n        const unsubscribe = ()=>{\n            window.removeEventListener(\"focus\", handleFocus);\n            window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            window.removeEventListener(\"online\", handleOnline);\n            window.removeEventListener(\"offline\", handleOffline);\n            initialized = false;\n        };\n        return unsubscribe;\n    }\n    return customHandler ? customHandler(dispatch, {\n        onFocus,\n        onFocusLost,\n        onOffline,\n        onOnline\n    }) : defaultHandler();\n}\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n    return e.type === \"query\" /* query */ ;\n}\nfunction isMutationDefinition(e) {\n    return e.type === \"mutation\" /* mutation */ ;\n}\nfunction isInfiniteQueryDefinition(e) {\n    return e.type === \"infinitequery\" /* infinitequery */ ;\n}\nfunction isAnyQueryDefinition(e) {\n    return isQueryDefinition(e) || isInfiniteQueryDefinition(e);\n}\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n    if (isFunction(description)) {\n        return description(result, error, queryArg, meta).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);\n    }\n    if (Array.isArray(description)) {\n        return description.map(expandTagDescription).map(assertTagTypes);\n    }\n    return [];\n}\nfunction isFunction(t) {\n    return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n    return typeof description === \"string\" ? {\n        type: description\n    } : description;\n}\n// src/query/core/buildThunks.ts\n\n// src/query/core/buildInitiate.ts\n\n// src/tsHelpers.ts\nfunction asSafePromise(promise, fallback) {\n    return promise.catch(fallback);\n}\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = (arg)=>typeof arg[forceQueryFnSymbol] === \"function\";\nfunction buildInitiate({ serializeQueryArgs, queryThunk, infiniteQueryThunk, mutationThunk, api, context }) {\n    const runningQueries = /* @__PURE__ */ new Map();\n    const runningMutations = /* @__PURE__ */ new Map();\n    const { unsubscribeQueryResult, removeMutationResult, updateSubscriptionOptions } = api.internalActions;\n    return {\n        buildInitiateQuery,\n        buildInitiateInfiniteQuery,\n        buildInitiateMutation,\n        getRunningQueryThunk,\n        getRunningMutationThunk,\n        getRunningQueriesThunk,\n        getRunningMutationsThunk\n    };\n    function getRunningQueryThunk(endpointName, queryArgs) {\n        return (dispatch)=>{\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            const queryCacheKey = serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            });\n            return runningQueries.get(dispatch)?.[queryCacheKey];\n        };\n    }\n    function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n        return (dispatch)=>{\n            return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId];\n        };\n    }\n    function getRunningQueriesThunk() {\n        return (dispatch)=>Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n    }\n    function getRunningMutationsThunk() {\n        return (dispatch)=>Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n    }\n    function middlewareWarning(dispatch) {\n        if (true) {\n            if (middlewareWarning.triggered) return;\n            const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n            middlewareWarning.triggered = true;\n            if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n                throw new Error( false ? 0 : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n            }\n        }\n    }\n    function buildInitiateAnyQuery(endpointName, endpointDefinition) {\n        const queryAction = (arg, { subscribe = true, forceRefetch, subscriptionOptions, [forceQueryFnSymbol]: forceQueryFn, ...rest } = {})=>(dispatch, getState)=>{\n                const queryCacheKey = serializeQueryArgs({\n                    queryArgs: arg,\n                    endpointDefinition,\n                    endpointName\n                });\n                let thunk;\n                const commonThunkArgs = {\n                    ...rest,\n                    type: \"query\",\n                    subscribe,\n                    forceRefetch,\n                    subscriptionOptions,\n                    endpointName,\n                    originalArgs: arg,\n                    queryCacheKey,\n                    [forceQueryFnSymbol]: forceQueryFn\n                };\n                if (isQueryDefinition(endpointDefinition)) {\n                    thunk = queryThunk(commonThunkArgs);\n                } else {\n                    const { direction, initialPageParam } = rest;\n                    thunk = infiniteQueryThunk({\n                        ...commonThunkArgs,\n                        // Supply these even if undefined. This helps with a field existence\n                        // check over in `buildSlice.ts`\n                        direction,\n                        initialPageParam\n                    });\n                }\n                const selector = api.endpoints[endpointName].select(arg);\n                const thunkResult = dispatch(thunk);\n                const stateAfter = selector(getState());\n                middlewareWarning(dispatch);\n                const { requestId, abort } = thunkResult;\n                const skippedSynchronously = stateAfter.requestId !== requestId;\n                const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n                const selectFromState = ()=>selector(getState());\n                const statePromise = Object.assign(forceQueryFn ? // a query has been forced (upsertQueryData)\n                // -> we want to resolve it once data has been written with the data that will be written\n                thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ? // a query has been skipped due to a condition and we do not have any currently running query\n                // -> we want to resolve it immediately with the current data\n                Promise.resolve(stateAfter) : // query just started or one is already in flight\n                // -> wait for the running query, then resolve with data from after that\n                Promise.all([\n                    runningQuery,\n                    thunkResult\n                ]).then(selectFromState), {\n                    arg,\n                    requestId,\n                    subscriptionOptions,\n                    queryCacheKey,\n                    abort,\n                    async unwrap () {\n                        const result = await statePromise;\n                        if (result.isError) {\n                            throw result.error;\n                        }\n                        return result.data;\n                    },\n                    refetch: ()=>dispatch(queryAction(arg, {\n                            subscribe: false,\n                            forceRefetch: true\n                        })),\n                    unsubscribe () {\n                        if (subscribe) dispatch(unsubscribeQueryResult({\n                            queryCacheKey,\n                            requestId\n                        }));\n                    },\n                    updateSubscriptionOptions (options) {\n                        statePromise.subscriptionOptions = options;\n                        dispatch(updateSubscriptionOptions({\n                            endpointName,\n                            requestId,\n                            queryCacheKey,\n                            options\n                        }));\n                    }\n                });\n                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n                    const running = getOrInsert(runningQueries, dispatch, {});\n                    running[queryCacheKey] = statePromise;\n                    statePromise.then(()=>{\n                        delete running[queryCacheKey];\n                        if (!countObjectKeys(running)) {\n                            runningQueries.delete(dispatch);\n                        }\n                    });\n                }\n                return statePromise;\n            };\n        return queryAction;\n    }\n    function buildInitiateQuery(endpointName, endpointDefinition) {\n        const queryAction = buildInitiateAnyQuery(endpointName, endpointDefinition);\n        return queryAction;\n    }\n    function buildInitiateInfiniteQuery(endpointName, endpointDefinition) {\n        const infiniteQueryAction = buildInitiateAnyQuery(endpointName, endpointDefinition);\n        return infiniteQueryAction;\n    }\n    function buildInitiateMutation(endpointName) {\n        return (arg, { track = true, fixedCacheKey } = {})=>(dispatch, getState)=>{\n                const thunk = mutationThunk({\n                    type: \"mutation\",\n                    endpointName,\n                    originalArgs: arg,\n                    track,\n                    fixedCacheKey\n                });\n                const thunkResult = dispatch(thunk);\n                middlewareWarning(dispatch);\n                const { requestId, abort, unwrap } = thunkResult;\n                const returnValuePromise = asSafePromise(thunkResult.unwrap().then((data)=>({\n                        data\n                    })), (error)=>({\n                        error\n                    }));\n                const reset = ()=>{\n                    dispatch(removeMutationResult({\n                        requestId,\n                        fixedCacheKey\n                    }));\n                };\n                const ret = Object.assign(returnValuePromise, {\n                    arg: thunkResult.arg,\n                    requestId,\n                    abort,\n                    unwrap,\n                    reset\n                });\n                const running = runningMutations.get(dispatch) || {};\n                runningMutations.set(dispatch, running);\n                running[requestId] = ret;\n                ret.then(()=>{\n                    delete running[requestId];\n                    if (!countObjectKeys(running)) {\n                        runningMutations.delete(dispatch);\n                    }\n                });\n                if (fixedCacheKey) {\n                    running[fixedCacheKey] = ret;\n                    ret.then(()=>{\n                        if (running[fixedCacheKey] === ret) {\n                            delete running[fixedCacheKey];\n                            if (!countObjectKeys(running)) {\n                                runningMutations.delete(dispatch);\n                            }\n                        }\n                    });\n                }\n                return ret;\n            };\n    }\n}\n// src/query/standardSchema.ts\n\nvar NamedSchemaError = class extends _standard_schema_utils__WEBPACK_IMPORTED_MODULE_2__.SchemaError {\n    constructor(issues, value, schemaName, _bqMeta){\n        super(issues);\n        this.value = value;\n        this.schemaName = schemaName;\n        this._bqMeta = _bqMeta;\n    }\n};\nasync function parseWithSchema(schema, data, schemaName, bqMeta) {\n    const result = await schema[\"~standard\"].validate(data);\n    if (result.issues) {\n        throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);\n    }\n    return result.value;\n}\n// src/query/core/buildThunks.ts\nfunction defaultTransformResponse(baseQueryReturnValue) {\n    return baseQueryReturnValue;\n}\nvar addShouldAutoBatch = (arg = {})=>{\n    return {\n        ...arg,\n        [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true\n    };\n};\nfunction buildThunks({ reducerPath, baseQuery, context: { endpointDefinitions }, serializeQueryArgs, api, assertTagType, selectors, onSchemaFailure, catchSchemaFailure: globalCatchSchemaFailure, skipSchemaValidation: globalSkipSchemaValidation }) {\n    const patchQueryData = (endpointName, arg, patches, updateProvided)=>(dispatch, getState)=>{\n            const endpointDefinition = endpointDefinitions[endpointName];\n            const queryCacheKey = serializeQueryArgs({\n                queryArgs: arg,\n                endpointDefinition,\n                endpointName\n            });\n            dispatch(api.internalActions.queryResultPatched({\n                queryCacheKey,\n                patches\n            }));\n            if (!updateProvided) {\n                return;\n            }\n            const newValue = api.endpoints[endpointName].select(arg)(// Work around TS 4.1 mismatch\n            getState());\n            const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, arg, {}, assertTagType);\n            dispatch(api.internalActions.updateProvidedBy([\n                {\n                    queryCacheKey,\n                    providedTags\n                }\n            ]));\n        };\n    function addToStart(items, item, max = 0) {\n        const newItems = [\n            item,\n            ...items\n        ];\n        return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n    }\n    function addToEnd(items, item, max = 0) {\n        const newItems = [\n            ...items,\n            item\n        ];\n        return max && newItems.length > max ? newItems.slice(1) : newItems;\n    }\n    const updateQueryData = (endpointName, arg, updateRecipe, updateProvided = true)=>(dispatch, getState)=>{\n            const endpointDefinition = api.endpoints[endpointName];\n            const currentState = endpointDefinition.select(arg)(// Work around TS 4.1 mismatch\n            getState());\n            const ret = {\n                patches: [],\n                inversePatches: [],\n                undo: ()=>dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))\n            };\n            if (currentState.status === \"uninitialized\" /* uninitialized */ ) {\n                return ret;\n            }\n            let newValue;\n            if (\"data\" in currentState) {\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_3__.isDraftable)(currentState.data)) {\n                    const [value, patches, inversePatches] = (0,immer__WEBPACK_IMPORTED_MODULE_3__.produceWithPatches)(currentState.data, updateRecipe);\n                    ret.patches.push(...patches);\n                    ret.inversePatches.push(...inversePatches);\n                    newValue = value;\n                } else {\n                    newValue = updateRecipe(currentState.data);\n                    ret.patches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: newValue\n                    });\n                    ret.inversePatches.push({\n                        op: \"replace\",\n                        path: [],\n                        value: currentState.data\n                    });\n                }\n            }\n            if (ret.patches.length === 0) {\n                return ret;\n            }\n            dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));\n            return ret;\n        };\n    const upsertQueryData = (endpointName, arg, value)=>(dispatch)=>{\n            const res = dispatch(api.endpoints[endpointName].initiate(arg, {\n                subscribe: false,\n                forceRefetch: true,\n                [forceQueryFnSymbol]: ()=>({\n                        data: value\n                    })\n            }));\n            return res;\n        };\n    const getTransformCallbackForEndpoint = (endpointDefinition, transformFieldName)=>{\n        return endpointDefinition.query && endpointDefinition[transformFieldName] ? endpointDefinition[transformFieldName] : defaultTransformResponse;\n    };\n    const executeEndpoint = async (arg, { signal, abort, rejectWithValue, fulfillWithValue, dispatch, getState, extra })=>{\n        const endpointDefinition = endpointDefinitions[arg.endpointName];\n        const { metaSchema, skipSchemaValidation = globalSkipSchemaValidation } = endpointDefinition;\n        try {\n            let transformResponse = getTransformCallbackForEndpoint(endpointDefinition, \"transformResponse\");\n            const baseQueryApi = {\n                signal,\n                abort,\n                dispatch,\n                getState,\n                extra,\n                endpoint: arg.endpointName,\n                type: arg.type,\n                forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0,\n                queryCacheKey: arg.type === \"query\" ? arg.queryCacheKey : void 0\n            };\n            const forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n            let finalQueryReturnValue;\n            const fetchPage = async (data, param, maxPages, previous)=>{\n                if (param == null && data.pages.length) {\n                    return Promise.resolve({\n                        data\n                    });\n                }\n                const finalQueryArg = {\n                    queryArg: arg.originalArgs,\n                    pageParam: param\n                };\n                const pageResponse = await executeRequest(finalQueryArg);\n                const addTo = previous ? addToStart : addToEnd;\n                return {\n                    data: {\n                        pages: addTo(data.pages, pageResponse.data, maxPages),\n                        pageParams: addTo(data.pageParams, param, maxPages)\n                    },\n                    meta: pageResponse.meta\n                };\n            };\n            async function executeRequest(finalQueryArg) {\n                let result;\n                const { extraOptions, argSchema, rawResponseSchema, responseSchema } = endpointDefinition;\n                if (argSchema && !skipSchemaValidation) {\n                    finalQueryArg = await parseWithSchema(argSchema, finalQueryArg, \"argSchema\", {});\n                }\n                if (forceQueryFn) {\n                    result = forceQueryFn();\n                } else if (endpointDefinition.query) {\n                    result = await baseQuery(endpointDefinition.query(finalQueryArg), baseQueryApi, extraOptions);\n                } else {\n                    result = await endpointDefinition.queryFn(finalQueryArg, baseQueryApi, extraOptions, (arg2)=>baseQuery(arg2, baseQueryApi, extraOptions));\n                }\n                if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                    const what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n                    let err;\n                    if (!result) {\n                        err = `${what} did not return anything.`;\n                    } else if (typeof result !== \"object\") {\n                        err = `${what} did not return an object.`;\n                    } else if (result.error && result.data) {\n                        err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n                    } else if (result.error === void 0 && result.data === void 0) {\n                        err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n                    } else {\n                        for (const key of Object.keys(result)){\n                            if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                                err = `The object returned by ${what} has the unknown property ${key}.`;\n                                break;\n                            }\n                        }\n                    }\n                    if (err) {\n                        console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n                  ${err}\n                  It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n                  Object returned was:`, result);\n                    }\n                }\n                if (result.error) throw new HandledError(result.error, result.meta);\n                let { data } = result;\n                if (rawResponseSchema && !skipSchemaValidation) {\n                    data = await parseWithSchema(rawResponseSchema, result.data, \"rawResponseSchema\", result.meta);\n                }\n                let transformedResponse = await transformResponse(data, result.meta, finalQueryArg);\n                if (responseSchema && !skipSchemaValidation) {\n                    transformedResponse = await parseWithSchema(responseSchema, transformedResponse, \"responseSchema\", result.meta);\n                }\n                return {\n                    ...result,\n                    data: transformedResponse\n                };\n            }\n            if (arg.type === \"query\" && \"infiniteQueryOptions\" in endpointDefinition) {\n                const { infiniteQueryOptions } = endpointDefinition;\n                const { maxPages = Infinity } = infiniteQueryOptions;\n                let result;\n                const blankData = {\n                    pages: [],\n                    pageParams: []\n                };\n                const cachedData = selectors.selectQueryEntry(getState(), arg.queryCacheKey)?.data;\n                const isForcedQueryNeedingRefetch = // arg.forceRefetch\n                isForcedQuery(arg, getState()) && !arg.direction;\n                const existingData = isForcedQueryNeedingRefetch || !cachedData ? blankData : cachedData;\n                if (\"direction\" in arg && arg.direction && existingData.pages.length) {\n                    const previous = arg.direction === \"backward\";\n                    const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n                    const param = pageParamFn(infiniteQueryOptions, existingData, arg.originalArgs);\n                    result = await fetchPage(existingData, param, maxPages, previous);\n                } else {\n                    const { initialPageParam = infiniteQueryOptions.initialPageParam } = arg;\n                    const cachedPageParams = cachedData?.pageParams ?? [];\n                    const firstPageParam = cachedPageParams[0] ?? initialPageParam;\n                    const totalPages = cachedPageParams.length;\n                    result = await fetchPage(existingData, firstPageParam, maxPages);\n                    if (forceQueryFn) {\n                        result = {\n                            data: result.data.pages[0]\n                        };\n                    }\n                    for(let i = 1; i < totalPages; i++){\n                        const param = getNextPageParam(infiniteQueryOptions, result.data, arg.originalArgs);\n                        result = await fetchPage(result.data, param, maxPages);\n                    }\n                }\n                finalQueryReturnValue = result;\n            } else {\n                finalQueryReturnValue = await executeRequest(arg.originalArgs);\n            }\n            if (metaSchema && !skipSchemaValidation && finalQueryReturnValue.meta) {\n                finalQueryReturnValue.meta = await parseWithSchema(metaSchema, finalQueryReturnValue.meta, \"metaSchema\", finalQueryReturnValue.meta);\n            }\n            return fulfillWithValue(finalQueryReturnValue.data, addShouldAutoBatch({\n                fulfilledTimeStamp: Date.now(),\n                baseQueryMeta: finalQueryReturnValue.meta\n            }));\n        } catch (error) {\n            let caughtError = error;\n            if (caughtError instanceof HandledError) {\n                let transformErrorResponse = getTransformCallbackForEndpoint(endpointDefinition, \"transformErrorResponse\");\n                const { rawErrorResponseSchema, errorResponseSchema } = endpointDefinition;\n                let { value, meta } = caughtError;\n                try {\n                    if (rawErrorResponseSchema && !skipSchemaValidation) {\n                        value = await parseWithSchema(rawErrorResponseSchema, value, \"rawErrorResponseSchema\", meta);\n                    }\n                    if (metaSchema && !skipSchemaValidation) {\n                        meta = await parseWithSchema(metaSchema, meta, \"metaSchema\", meta);\n                    }\n                    let transformedErrorResponse = await transformErrorResponse(value, meta, arg.originalArgs);\n                    if (errorResponseSchema && !skipSchemaValidation) {\n                        transformedErrorResponse = await parseWithSchema(errorResponseSchema, transformedErrorResponse, \"errorResponseSchema\", meta);\n                    }\n                    return rejectWithValue(transformedErrorResponse, addShouldAutoBatch({\n                        baseQueryMeta: meta\n                    }));\n                } catch (e) {\n                    caughtError = e;\n                }\n            }\n            try {\n                if (caughtError instanceof NamedSchemaError) {\n                    const info = {\n                        endpoint: arg.endpointName,\n                        arg: arg.originalArgs,\n                        type: arg.type,\n                        queryCacheKey: arg.type === \"query\" ? arg.queryCacheKey : void 0\n                    };\n                    endpointDefinition.onSchemaFailure?.(caughtError, info);\n                    onSchemaFailure?.(caughtError, info);\n                    const { catchSchemaFailure = globalCatchSchemaFailure } = endpointDefinition;\n                    if (catchSchemaFailure) {\n                        return rejectWithValue(catchSchemaFailure(caughtError, info), addShouldAutoBatch({\n                            baseQueryMeta: caughtError._bqMeta\n                        }));\n                    }\n                }\n            } catch (e) {\n                caughtError = e;\n            }\n            if (typeof process !== \"undefined\" && \"development\" !== \"production\") {\n                console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, caughtError);\n            } else {\n                console.error(caughtError);\n            }\n            throw caughtError;\n        }\n    };\n    function isForcedQuery(arg, state) {\n        const requestState = selectors.selectQueryEntry(state, arg.queryCacheKey);\n        const baseFetchOnMountOrArgChange = selectors.selectConfig(state).refetchOnMountOrArgChange;\n        const fulfilledVal = requestState?.fulfilledTimeStamp;\n        const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n        if (refetchVal) {\n            return refetchVal === true || (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n        }\n        return false;\n    }\n    const createQueryThunk = ()=>{\n        const generatedQueryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(`${reducerPath}/executeQuery`, executeEndpoint, {\n            getPendingMeta ({ arg }) {\n                const endpointDefinition = endpointDefinitions[arg.endpointName];\n                return addShouldAutoBatch({\n                    startedTimeStamp: Date.now(),\n                    ...isInfiniteQueryDefinition(endpointDefinition) ? {\n                        direction: arg.direction\n                    } : {}\n                });\n            },\n            condition (queryThunkArg, { getState }) {\n                const state = getState();\n                const requestState = selectors.selectQueryEntry(state, queryThunkArg.queryCacheKey);\n                const fulfilledVal = requestState?.fulfilledTimeStamp;\n                const currentArg = queryThunkArg.originalArgs;\n                const previousArg = requestState?.originalArgs;\n                const endpointDefinition = endpointDefinitions[queryThunkArg.endpointName];\n                const direction = queryThunkArg.direction;\n                if (isUpsertQuery(queryThunkArg)) {\n                    return true;\n                }\n                if (requestState?.status === \"pending\") {\n                    return false;\n                }\n                if (isForcedQuery(queryThunkArg, state)) {\n                    return true;\n                }\n                if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n                    currentArg,\n                    previousArg,\n                    endpointState: requestState,\n                    state\n                })) {\n                    return true;\n                }\n                if (fulfilledVal && !direction) {\n                    return false;\n                }\n                return true;\n            },\n            dispatchConditionRejection: true\n        });\n        return generatedQueryThunk;\n    };\n    const queryThunk = createQueryThunk();\n    const infiniteQueryThunk = createQueryThunk();\n    const mutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAsyncThunk)(`${reducerPath}/executeMutation`, executeEndpoint, {\n        getPendingMeta () {\n            return addShouldAutoBatch({\n                startedTimeStamp: Date.now()\n            });\n        }\n    });\n    const hasTheForce = (options)=>\"force\" in options;\n    const hasMaxAge = (options)=>\"ifOlderThan\" in options;\n    const prefetch = (endpointName, arg, options)=>(dispatch, getState)=>{\n            const force = hasTheForce(options) && options.force;\n            const maxAge = hasMaxAge(options) && options.ifOlderThan;\n            const queryAction = (force2 = true)=>{\n                const options2 = {\n                    forceRefetch: force2,\n                    isPrefetch: true\n                };\n                return api.endpoints[endpointName].initiate(arg, options2);\n            };\n            const latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n            if (force) {\n                dispatch(queryAction());\n            } else if (maxAge) {\n                const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n                if (!lastFulfilledTs) {\n                    dispatch(queryAction());\n                    return;\n                }\n                const shouldRetrigger = (Number(/* @__PURE__ */ new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n                if (shouldRetrigger) {\n                    dispatch(queryAction());\n                }\n            } else {\n                dispatch(queryAction(false));\n            }\n        };\n    function matchesEndpoint(endpointName) {\n        return (action)=>action?.meta?.arg?.endpointName === endpointName;\n    }\n    function buildMatchThunkActions(thunk, endpointName) {\n        return {\n            matchPending: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(thunk), matchesEndpoint(endpointName)),\n            matchFulfilled: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(thunk), matchesEndpoint(endpointName)),\n            matchRejected: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAllOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(thunk), matchesEndpoint(endpointName))\n        };\n    }\n    return {\n        queryThunk,\n        mutationThunk,\n        infiniteQueryThunk,\n        prefetch,\n        updateQueryData,\n        upsertQueryData,\n        patchQueryData,\n        buildMatchThunkActions\n    };\n}\nfunction getNextPageParam(options, { pages, pageParams }, queryArg) {\n    const lastIndex = pages.length - 1;\n    return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams, queryArg);\n}\nfunction getPreviousPageParam(options, { pages, pageParams }, queryArg) {\n    return options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams, queryArg);\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n    return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(action) ? action.payload : void 0, (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n// src/query/core/buildSlice.ts\n\n\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n    const substate = state[queryCacheKey];\n    if (substate) {\n        update(substate);\n    }\n}\nfunction getMutationCacheKey(id) {\n    return (\"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n    const substate = state[getMutationCacheKey(id)];\n    if (substate) {\n        update(substate);\n    }\n}\nvar initialState = {};\nfunction buildSlice({ reducerPath, queryThunk, mutationThunk, serializeQueryArgs, context: { endpointDefinitions: definitions, apiUid, extractRehydrationInfo, hasRehydrationInfo }, assertTagType, config }) {\n    const resetApiState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(`${reducerPath}/resetApiState`);\n    function writePendingCacheEntry(draft, arg, upserting, meta) {\n        draft[arg.queryCacheKey] ??= {\n            status: \"uninitialized\" /* uninitialized */ ,\n            endpointName: arg.endpointName\n        };\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate)=>{\n            substate.status = \"pending\" /* pending */ ;\n            substate.requestId = upserting && substate.requestId ? // for `upsertQuery` **updates**, keep the current `requestId`\n            substate.requestId : // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n            meta.requestId;\n            if (arg.originalArgs !== void 0) {\n                substate.originalArgs = arg.originalArgs;\n            }\n            substate.startedTimeStamp = meta.startedTimeStamp;\n            const endpointDefinition = definitions[meta.arg.endpointName];\n            if (isInfiniteQueryDefinition(endpointDefinition) && \"direction\" in arg) {\n                ;\n                substate.direction = arg.direction;\n            }\n        });\n    }\n    function writeFulfilledCacheEntry(draft, meta, payload, upserting) {\n        updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, (substate)=>{\n            if (substate.requestId !== meta.requestId && !upserting) return;\n            const { merge } = definitions[meta.arg.endpointName];\n            substate.status = \"fulfilled\" /* fulfilled */ ;\n            if (merge) {\n                if (substate.data !== void 0) {\n                    const { fulfilledTimeStamp, arg, baseQueryMeta, requestId } = meta;\n                    let newData = (0,immer__WEBPACK_IMPORTED_MODULE_3__.produce)(substate.data, (draftSubstateData)=>{\n                        return merge(draftSubstateData, payload, {\n                            arg: arg.originalArgs,\n                            baseQueryMeta,\n                            fulfilledTimeStamp,\n                            requestId\n                        });\n                    });\n                    substate.data = newData;\n                } else {\n                    substate.data = payload;\n                }\n            } else {\n                substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing((0,immer__WEBPACK_IMPORTED_MODULE_3__.isDraft)(substate.data) ? (0,immer__WEBPACK_IMPORTED_MODULE_3__.original)(substate.data) : substate.data, payload) : payload;\n            }\n            delete substate.error;\n            substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n    }\n    const querySlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/queries`,\n        initialState,\n        reducers: {\n            removeQueryResult: {\n                reducer (draft, { payload: { queryCacheKey } }) {\n                    delete draft[queryCacheKey];\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            },\n            cacheEntriesUpserted: {\n                reducer (draft, action) {\n                    for (const entry of action.payload){\n                        const { queryDescription: arg, value } = entry;\n                        writePendingCacheEntry(draft, arg, true, {\n                            arg,\n                            requestId: action.meta.requestId,\n                            startedTimeStamp: action.meta.timestamp\n                        });\n                        writeFulfilledCacheEntry(draft, {\n                            arg,\n                            requestId: action.meta.requestId,\n                            fulfilledTimeStamp: action.meta.timestamp,\n                            baseQueryMeta: {}\n                        }, value, // We know we're upserting here\n                        true);\n                    }\n                },\n                prepare: (payload)=>{\n                    const queryDescriptions = payload.map((entry)=>{\n                        const { endpointName, arg, value } = entry;\n                        const endpointDefinition = definitions[endpointName];\n                        const queryDescription = {\n                            type: \"query\",\n                            endpointName,\n                            originalArgs: entry.arg,\n                            queryCacheKey: serializeQueryArgs({\n                                queryArgs: arg,\n                                endpointDefinition,\n                                endpointName\n                            })\n                        };\n                        return {\n                            queryDescription,\n                            value\n                        };\n                    });\n                    const result = {\n                        payload: queryDescriptions,\n                        meta: {\n                            [_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.SHOULD_AUTOBATCH]: true,\n                            requestId: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.nanoid)(),\n                            timestamp: Date.now()\n                        }\n                    };\n                    return result;\n                }\n            },\n            queryResultPatched: {\n                reducer (draft, { payload: { queryCacheKey, patches } }) {\n                    updateQuerySubstateIfExists(draft, queryCacheKey, (substate)=>{\n                        substate.data = (0,immer__WEBPACK_IMPORTED_MODULE_3__.applyPatches)(substate.data, patches.concat());\n                    });\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(queryThunk.pending, (draft, { meta, meta: { arg } })=>{\n                const upserting = isUpsertQuery(arg);\n                writePendingCacheEntry(draft, arg, upserting, meta);\n            }).addCase(queryThunk.fulfilled, (draft, { meta, payload })=>{\n                const upserting = isUpsertQuery(meta.arg);\n                writeFulfilledCacheEntry(draft, meta, payload, upserting);\n            }).addCase(queryThunk.rejected, (draft, { meta: { condition, arg, requestId }, error, payload })=>{\n                updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate)=>{\n                    if (condition) {} else {\n                        if (substate.requestId !== requestId) return;\n                        substate.status = \"rejected\" /* rejected */ ;\n                        substate.error = payload ?? error;\n                    }\n                });\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { queries } = extractRehydrationInfo(action);\n                for (const [key, entry] of Object.entries(queries)){\n                    if (// do not rehydrate entries that were currently in flight.\n                    entry?.status === \"fulfilled\" /* fulfilled */  || entry?.status === \"rejected\" /* rejected */ ) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    const mutationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/mutations`,\n        initialState,\n        reducers: {\n            removeMutationResult: {\n                reducer (draft, { payload }) {\n                    const cacheKey = getMutationCacheKey(payload);\n                    if (cacheKey in draft) {\n                        delete draft[cacheKey];\n                    }\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(mutationThunk.pending, (draft, { meta, meta: { requestId, arg, startedTimeStamp } })=>{\n                if (!arg.track) return;\n                draft[getMutationCacheKey(meta)] = {\n                    requestId,\n                    status: \"pending\" /* pending */ ,\n                    endpointName: arg.endpointName,\n                    startedTimeStamp\n                };\n            }).addCase(mutationThunk.fulfilled, (draft, { payload, meta })=>{\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, (substate)=>{\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = \"fulfilled\" /* fulfilled */ ;\n                    substate.data = payload;\n                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n                });\n            }).addCase(mutationThunk.rejected, (draft, { payload, error, meta })=>{\n                if (!meta.arg.track) return;\n                updateMutationSubstateIfExists(draft, meta, (substate)=>{\n                    if (substate.requestId !== meta.requestId) return;\n                    substate.status = \"rejected\" /* rejected */ ;\n                    substate.error = payload ?? error;\n                });\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { mutations } = extractRehydrationInfo(action);\n                for (const [key, entry] of Object.entries(mutations)){\n                    if (// do not rehydrate entries that were currently in flight.\n                    (entry?.status === \"fulfilled\" /* fulfilled */  || entry?.status === \"rejected\" /* rejected */ ) && // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n                    key !== entry?.requestId) {\n                        draft[key] = entry;\n                    }\n                }\n            });\n        }\n    });\n    const initialInvalidationState = {\n        tags: {},\n        keys: {}\n    };\n    const invalidationSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/invalidation`,\n        initialState: initialInvalidationState,\n        reducers: {\n            updateProvidedBy: {\n                reducer (draft, action) {\n                    for (const { queryCacheKey, providedTags } of action.payload){\n                        removeCacheKeyFromTags(draft, queryCacheKey);\n                        for (const { type, id } of providedTags){\n                            const subscribedQueries = (draft.tags[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n                            const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                            if (!alreadySubscribed) {\n                                subscribedQueries.push(queryCacheKey);\n                            }\n                        }\n                        draft.keys[queryCacheKey] = providedTags;\n                    }\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        },\n        extraReducers (builder) {\n            builder.addCase(querySlice.actions.removeQueryResult, (draft, { payload: { queryCacheKey } })=>{\n                removeCacheKeyFromTags(draft, queryCacheKey);\n            }).addMatcher(hasRehydrationInfo, (draft, action)=>{\n                const { provided } = extractRehydrationInfo(action);\n                for (const [type, incomingTags] of Object.entries(provided)){\n                    for (const [id, cacheKeys] of Object.entries(incomingTags)){\n                        const subscribedQueries = (draft.tags[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n                        for (const queryCacheKey of cacheKeys){\n                            const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n                            if (!alreadySubscribed) {\n                                subscribedQueries.push(queryCacheKey);\n                            }\n                        }\n                    }\n                }\n            }).addMatcher((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(queryThunk)), (draft, action)=>{\n                writeProvidedTagsForQueries(draft, [\n                    action\n                ]);\n            }).addMatcher(querySlice.actions.cacheEntriesUpserted.match, (draft, action)=>{\n                const mockActions = action.payload.map(({ queryDescription, value })=>{\n                    return {\n                        type: \"UNKNOWN\",\n                        payload: value,\n                        meta: {\n                            requestStatus: \"fulfilled\",\n                            requestId: \"UNKNOWN\",\n                            arg: queryDescription\n                        }\n                    };\n                });\n                writeProvidedTagsForQueries(draft, mockActions);\n            });\n        }\n    });\n    function removeCacheKeyFromTags(draft, queryCacheKey) {\n        const existingTags = draft.keys[queryCacheKey] ?? [];\n        for (const tag of existingTags){\n            const tagType = tag.type;\n            const tagId = tag.id ?? \"__internal_without_id\";\n            const tagSubscriptions = draft.tags[tagType]?.[tagId];\n            if (tagSubscriptions) {\n                draft.tags[tagType][tagId] = tagSubscriptions.filter((qc)=>qc !== queryCacheKey);\n            }\n        }\n        delete draft.keys[queryCacheKey];\n    }\n    function writeProvidedTagsForQueries(draft, actions2) {\n        const providedByEntries = actions2.map((action)=>{\n            const providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n            const { queryCacheKey } = action.meta.arg;\n            return {\n                queryCacheKey,\n                providedTags\n            };\n        });\n        invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy(providedByEntries));\n    }\n    const subscriptionSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/subscriptions`,\n        initialState,\n        reducers: {\n            updateSubscriptionOptions (d, a) {},\n            unsubscribeQueryResult (d, a) {},\n            internal_getRTKQSubscriptions () {}\n        }\n    });\n    const internalSubscriptionsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/internalSubscriptions`,\n        initialState,\n        reducers: {\n            subscriptionsUpdated: {\n                reducer (state, action) {\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_3__.applyPatches)(state, action.payload);\n                },\n                prepare: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.prepareAutoBatched)()\n            }\n        }\n    });\n    const configSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n        name: `${reducerPath}/config`,\n        initialState: {\n            online: isOnline(),\n            focused: isDocumentVisible(),\n            middlewareRegistered: false,\n            ...config\n        },\n        reducers: {\n            middlewareRegistered (state, { payload }) {\n                state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n            }\n        },\n        extraReducers: (builder)=>{\n            builder.addCase(onOnline, (state)=>{\n                state.online = true;\n            }).addCase(onOffline, (state)=>{\n                state.online = false;\n            }).addCase(onFocus, (state)=>{\n                state.focused = true;\n            }).addCase(onFocusLost, (state)=>{\n                state.focused = false;\n            }).addMatcher(hasRehydrationInfo, (draft)=>({\n                    ...draft\n                }));\n        }\n    });\n    const combinedReducer = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({\n        queries: querySlice.reducer,\n        mutations: mutationSlice.reducer,\n        provided: invalidationSlice.reducer,\n        subscriptions: internalSubscriptionsSlice.reducer,\n        config: configSlice.reducer\n    });\n    const reducer = (state, action)=>combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n    const actions = {\n        ...configSlice.actions,\n        ...querySlice.actions,\n        ...subscriptionSlice.actions,\n        ...internalSubscriptionsSlice.actions,\n        ...mutationSlice.actions,\n        ...invalidationSlice.actions,\n        resetApiState\n    };\n    return {\n        reducer,\n        actions\n    };\n}\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */ Symbol.for(\"RTKQ/skipToken\");\nvar initialSubState = {\n    status: \"uninitialized\" /* uninitialized */ \n};\nvar defaultQuerySubState = /* @__PURE__ */ (0,immer__WEBPACK_IMPORTED_MODULE_3__.produce)(initialSubState, ()=>{});\nvar defaultMutationSubState = /* @__PURE__ */ (0,immer__WEBPACK_IMPORTED_MODULE_3__.produce)(initialSubState, ()=>{});\nfunction buildSelectors({ serializeQueryArgs, reducerPath, createSelector: createSelector2 }) {\n    const selectSkippedQuery = (state)=>defaultQuerySubState;\n    const selectSkippedMutation = (state)=>defaultMutationSubState;\n    return {\n        buildQuerySelector,\n        buildInfiniteQuerySelector,\n        buildMutationSelector,\n        selectInvalidatedBy,\n        selectCachedArgsForQuery,\n        selectApiState,\n        selectQueries,\n        selectMutations,\n        selectQueryEntry,\n        selectConfig\n    };\n    function withRequestFlags(substate) {\n        return {\n            ...substate,\n            ...getRequestStatusFlags(substate.status)\n        };\n    }\n    function selectApiState(rootState) {\n        const state = rootState[reducerPath];\n        if (true) {\n            if (!state) {\n                if (selectApiState.triggered) return state;\n                selectApiState.triggered = true;\n                console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n            }\n        }\n        return state;\n    }\n    function selectQueries(rootState) {\n        return selectApiState(rootState)?.queries;\n    }\n    function selectQueryEntry(rootState, cacheKey) {\n        return selectQueries(rootState)?.[cacheKey];\n    }\n    function selectMutations(rootState) {\n        return selectApiState(rootState)?.mutations;\n    }\n    function selectConfig(rootState) {\n        return selectApiState(rootState)?.config;\n    }\n    function buildAnyQuerySelector(endpointName, endpointDefinition, combiner) {\n        return (queryArgs)=>{\n            if (queryArgs === skipToken) {\n                return createSelector2(selectSkippedQuery, combiner);\n            }\n            const serializedArgs = serializeQueryArgs({\n                queryArgs,\n                endpointDefinition,\n                endpointName\n            });\n            const selectQuerySubstate = (state)=>selectQueryEntry(state, serializedArgs) ?? defaultQuerySubState;\n            return createSelector2(selectQuerySubstate, combiner);\n        };\n    }\n    function buildQuerySelector(endpointName, endpointDefinition) {\n        return buildAnyQuerySelector(endpointName, endpointDefinition, withRequestFlags);\n    }\n    function buildInfiniteQuerySelector(endpointName, endpointDefinition) {\n        const { infiniteQueryOptions } = endpointDefinition;\n        function withInfiniteQueryResultFlags(substate) {\n            const stateWithRequestFlags = {\n                ...substate,\n                ...getRequestStatusFlags(substate.status)\n            };\n            const { isLoading, isError, direction } = stateWithRequestFlags;\n            const isForward = direction === \"forward\";\n            const isBackward = direction === \"backward\";\n            return {\n                ...stateWithRequestFlags,\n                hasNextPage: getHasNextPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n                hasPreviousPage: getHasPreviousPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n                isFetchingNextPage: isLoading && isForward,\n                isFetchingPreviousPage: isLoading && isBackward,\n                isFetchNextPageError: isError && isForward,\n                isFetchPreviousPageError: isError && isBackward\n            };\n        }\n        return buildAnyQuerySelector(endpointName, endpointDefinition, withInfiniteQueryResultFlags);\n    }\n    function buildMutationSelector() {\n        return (id)=>{\n            let mutationId;\n            if (typeof id === \"object\") {\n                mutationId = getMutationCacheKey(id) ?? skipToken;\n            } else {\n                mutationId = id;\n            }\n            const selectMutationSubstate = (state)=>selectApiState(state)?.mutations?.[mutationId] ?? defaultMutationSubState;\n            const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n            return createSelector2(finalSelectMutationSubstate, withRequestFlags);\n        };\n    }\n    function selectInvalidatedBy(state, tags) {\n        const apiState = state[reducerPath];\n        const toInvalidate = /* @__PURE__ */ new Set();\n        for (const tag of tags.filter(isNotNullish).map(expandTagDescription)){\n            const provided = apiState.provided.tags[tag.type];\n            if (!provided) {\n                continue;\n            }\n            let invalidateSubscriptions = (tag.id !== void 0 ? // id given: invalidate all queries that provide this type & id\n            provided[tag.id] : // no id: invalidate all queries that provide this type\n            flatten(Object.values(provided))) ?? [];\n            for (const invalidate of invalidateSubscriptions){\n                toInvalidate.add(invalidate);\n            }\n        }\n        return flatten(Array.from(toInvalidate.values()).map((queryCacheKey)=>{\n            const querySubState = apiState.queries[queryCacheKey];\n            return querySubState ? [\n                {\n                    queryCacheKey,\n                    endpointName: querySubState.endpointName,\n                    originalArgs: querySubState.originalArgs\n                }\n            ] : [];\n        }));\n    }\n    function selectCachedArgsForQuery(state, queryName) {\n        return Object.values(selectQueries(state)).filter((entry)=>entry?.endpointName === queryName && entry.status !== \"uninitialized\" /* uninitialized */ ).map((entry)=>entry.originalArgs);\n    }\n    function getHasNextPage(options, data, queryArg) {\n        if (!data) return false;\n        return getNextPageParam(options, data, queryArg) != null;\n    }\n    function getHasPreviousPage(options, data, queryArg) {\n        if (!data || !options.getPreviousPageParam) return false;\n        return getPreviousPageParam(options, data, queryArg) != null;\n    }\n}\n// src/query/createApi.ts\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({ endpointName, queryArgs })=>{\n    let serialized = \"\";\n    const cached = cache?.get(queryArgs);\n    if (typeof cached === \"string\") {\n        serialized = cached;\n    } else {\n        const stringified = JSON.stringify(queryArgs, (key, value)=>{\n            value = typeof value === \"bigint\" ? {\n                $bigint: value.toString()\n            } : value;\n            value = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) ? Object.keys(value).sort().reduce((acc, key2)=>{\n                acc[key2] = value[key2];\n                return acc;\n            }, {}) : value;\n            return value;\n        });\n        if ((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(queryArgs)) {\n            cache?.set(queryArgs, stringified);\n        }\n        serialized = stringified;\n    }\n    return `${endpointName}(${serialized})`;\n};\n// src/query/createApi.ts\n\nfunction buildCreateApi(...modules) {\n    return function baseCreateApi(options) {\n        const extractRehydrationInfo = (0,reselect__WEBPACK_IMPORTED_MODULE_4__.weakMapMemoize)((action)=>options.extractRehydrationInfo?.(action, {\n                reducerPath: options.reducerPath ?? \"api\"\n            }));\n        const optionsWithDefaults = {\n            reducerPath: \"api\",\n            keepUnusedDataFor: 60,\n            refetchOnMountOrArgChange: false,\n            refetchOnFocus: false,\n            refetchOnReconnect: false,\n            invalidationBehavior: \"delayed\",\n            ...options,\n            extractRehydrationInfo,\n            serializeQueryArgs (queryArgsApi) {\n                let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n                if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n                    const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;\n                    finalSerializeQueryArgs = (queryArgsApi2)=>{\n                        const initialResult = endpointSQA(queryArgsApi2);\n                        if (typeof initialResult === \"string\") {\n                            return initialResult;\n                        } else {\n                            return defaultSerializeQueryArgs({\n                                ...queryArgsApi2,\n                                queryArgs: initialResult\n                            });\n                        }\n                    };\n                } else if (options.serializeQueryArgs) {\n                    finalSerializeQueryArgs = options.serializeQueryArgs;\n                }\n                return finalSerializeQueryArgs(queryArgsApi);\n            },\n            tagTypes: [\n                ...options.tagTypes || []\n            ]\n        };\n        const context = {\n            endpointDefinitions: {},\n            batch (fn) {\n                fn();\n            },\n            apiUid: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.nanoid)(),\n            extractRehydrationInfo,\n            hasRehydrationInfo: (0,reselect__WEBPACK_IMPORTED_MODULE_4__.weakMapMemoize)((action)=>extractRehydrationInfo(action) != null)\n        };\n        const api = {\n            injectEndpoints,\n            enhanceEndpoints ({ addTagTypes, endpoints }) {\n                if (addTagTypes) {\n                    for (const eT of addTagTypes){\n                        if (!optionsWithDefaults.tagTypes.includes(eT)) {\n                            ;\n                            optionsWithDefaults.tagTypes.push(eT);\n                        }\n                    }\n                }\n                if (endpoints) {\n                    for (const [endpointName, partialDefinition] of Object.entries(endpoints)){\n                        if (typeof partialDefinition === \"function\") {\n                            partialDefinition(context.endpointDefinitions[endpointName]);\n                        } else {\n                            Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n                        }\n                    }\n                }\n                return api;\n            }\n        };\n        const initializedModules = modules.map((m)=>m.init(api, optionsWithDefaults, context));\n        function injectEndpoints(inject) {\n            const evaluatedEndpoints = inject.endpoints({\n                query: (x)=>({\n                        ...x,\n                        type: \"query\" /* query */ \n                    }),\n                mutation: (x)=>({\n                        ...x,\n                        type: \"mutation\" /* mutation */ \n                    }),\n                infiniteQuery: (x)=>({\n                        ...x,\n                        type: \"infinitequery\" /* infinitequery */ \n                    })\n            });\n            for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)){\n                if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n                    if (inject.overrideExisting === \"throw\") {\n                        throw new Error( false ? 0 : `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n                    } else if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                        console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n                    }\n                    continue;\n                }\n                if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                    if (isInfiniteQueryDefinition(definition)) {\n                        const { infiniteQueryOptions } = definition;\n                        const { maxPages, getPreviousPageParam: getPreviousPageParam2 } = infiniteQueryOptions;\n                        if (typeof maxPages === \"number\") {\n                            if (maxPages < 1) {\n                                throw new Error( false ? 0 : `maxPages for endpoint '${endpointName}' must be a number greater than 0`);\n                            }\n                            if (typeof getPreviousPageParam2 !== \"function\") {\n                                throw new Error( false ? 0 : `getPreviousPageParam for endpoint '${endpointName}' must be a function if maxPages is used`);\n                            }\n                        }\n                    }\n                }\n                context.endpointDefinitions[endpointName] = definition;\n                for (const m of initializedModules){\n                    m.injectEndpoint(endpointName, definition);\n                }\n            }\n            return api;\n        }\n        return api.injectEndpoints({\n            endpoints: options.endpoints\n        });\n    };\n}\n// src/query/fakeBaseQuery.ts\n\nvar _NEVER = /* @__PURE__ */ Symbol();\nfunction fakeBaseQuery() {\n    return function() {\n        throw new Error( false ? 0 : \"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n    };\n}\n// src/query/core/module.ts\n\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target, ...args) {\n    return Object.assign(target, ...args);\n}\n// src/query/core/buildMiddleware/batchActions.ts\n\nvar buildBatchedActionsHandler = ({ api, queryThunk, internalState })=>{\n    const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n    let previousSubscriptions = null;\n    let updateSyncTimer = null;\n    const { updateSubscriptionOptions, unsubscribeQueryResult } = api.internalActions;\n    const actuallyMutateSubscriptions = (mutableState, action)=>{\n        if (updateSubscriptionOptions.match(action)) {\n            const { queryCacheKey, requestId, options } = action.payload;\n            if (mutableState?.[queryCacheKey]?.[requestId]) {\n                mutableState[queryCacheKey][requestId] = options;\n            }\n            return true;\n        }\n        if (unsubscribeQueryResult.match(action)) {\n            const { queryCacheKey, requestId } = action.payload;\n            if (mutableState[queryCacheKey]) {\n                delete mutableState[queryCacheKey][requestId];\n            }\n            return true;\n        }\n        if (api.internalActions.removeQueryResult.match(action)) {\n            delete mutableState[action.payload.queryCacheKey];\n            return true;\n        }\n        if (queryThunk.pending.match(action)) {\n            const { meta: { arg, requestId } } = action;\n            const substate = mutableState[arg.queryCacheKey] ??= {};\n            substate[`${requestId}_running`] = {};\n            if (arg.subscribe) {\n                substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n            }\n            return true;\n        }\n        let mutated = false;\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n            const state = mutableState[action.meta.arg.queryCacheKey] || {};\n            const key = `${action.meta.requestId}_running`;\n            mutated ||= !!state[key];\n            delete state[key];\n        }\n        if (queryThunk.rejected.match(action)) {\n            const { meta: { condition, arg, requestId } } = action;\n            if (condition && arg.subscribe) {\n                const substate = mutableState[arg.queryCacheKey] ??= {};\n                substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n                mutated = true;\n            }\n        }\n        return mutated;\n    };\n    const getSubscriptions = ()=>internalState.currentSubscriptions;\n    const getSubscriptionCount = (queryCacheKey)=>{\n        const subscriptions = getSubscriptions();\n        const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n        return countObjectKeys(subscriptionsForQueryArg);\n    };\n    const isRequestSubscribed = (queryCacheKey, requestId)=>{\n        const subscriptions = getSubscriptions();\n        return !!subscriptions?.[queryCacheKey]?.[requestId];\n    };\n    const subscriptionSelectors = {\n        getSubscriptions,\n        getSubscriptionCount,\n        isRequestSubscribed\n    };\n    return (action, mwApi)=>{\n        if (!previousSubscriptions) {\n            previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n        }\n        if (api.util.resetApiState.match(action)) {\n            previousSubscriptions = internalState.currentSubscriptions = {};\n            updateSyncTimer = null;\n            return [\n                true,\n                false\n            ];\n        }\n        if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n            return [\n                false,\n                subscriptionSelectors\n            ];\n        }\n        const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n        let actionShouldContinue = true;\n        if (didMutate) {\n            if (!updateSyncTimer) {\n                updateSyncTimer = setTimeout(()=>{\n                    const newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n                    const [, patches] = (0,immer__WEBPACK_IMPORTED_MODULE_3__.produceWithPatches)(previousSubscriptions, ()=>newSubscriptions);\n                    mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n                    previousSubscriptions = newSubscriptions;\n                    updateSyncTimer = null;\n                }, 500);\n            }\n            const isSubscriptionSliceAction = typeof action.type == \"string\" && !!action.type.startsWith(subscriptionsPrefix);\n            const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n            actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n        }\n        return [\n            actionShouldContinue,\n            false\n        ];\n    };\n};\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n    for(const k in obj){\n        return false;\n    }\n    return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = ({ reducerPath, api, queryThunk, context, internalState, selectors: { selectQueryEntry, selectConfig } })=>{\n    const { removeQueryResult, unsubscribeQueryResult, cacheEntriesUpserted } = api.internalActions;\n    const canTriggerUnsubscribe = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);\n    function anySubscriptionsRemainingForKey(queryCacheKey) {\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        return !!subscriptions && !isObjectEmpty(subscriptions);\n    }\n    const currentRemovalTimeouts = {};\n    const handler = (action, mwApi, internalState2)=>{\n        const state = mwApi.getState();\n        const config = selectConfig(state);\n        if (canTriggerUnsubscribe(action)) {\n            let queryCacheKeys;\n            if (cacheEntriesUpserted.match(action)) {\n                queryCacheKeys = action.payload.map((entry)=>entry.queryDescription.queryCacheKey);\n            } else {\n                const { queryCacheKey } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;\n                queryCacheKeys = [\n                    queryCacheKey\n                ];\n            }\n            handleUnsubscribeMany(queryCacheKeys, mwApi, config);\n        }\n        if (api.util.resetApiState.match(action)) {\n            for (const [key, timeout] of Object.entries(currentRemovalTimeouts)){\n                if (timeout) clearTimeout(timeout);\n                delete currentRemovalTimeouts[key];\n            }\n        }\n        if (context.hasRehydrationInfo(action)) {\n            const { queries } = context.extractRehydrationInfo(action);\n            handleUnsubscribeMany(Object.keys(queries), mwApi, config);\n        }\n    };\n    function handleUnsubscribeMany(cacheKeys, api2, config) {\n        const state = api2.getState();\n        for (const queryCacheKey of cacheKeys){\n            const entry = selectQueryEntry(state, queryCacheKey);\n            handleUnsubscribe(queryCacheKey, entry?.endpointName, api2, config);\n        }\n    }\n    function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n        const endpointDefinition = context.endpointDefinitions[endpointName];\n        const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n        if (keepUnusedDataFor === Infinity) {\n            return;\n        }\n        const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n            const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n            if (currentTimeout) {\n                clearTimeout(currentTimeout);\n            }\n            currentRemovalTimeouts[queryCacheKey] = setTimeout(()=>{\n                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n                    api2.dispatch(removeQueryResult({\n                        queryCacheKey\n                    }));\n                }\n                delete currentRemovalTimeouts[queryCacheKey];\n            }, finalKeepUnusedDataFor * 1e3);\n        }\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = ({ api, reducerPath, context, queryThunk, mutationThunk, internalState, selectors: { selectQueryEntry, selectApiState } })=>{\n    const isQueryThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(queryThunk);\n    const isMutationThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAsyncThunkAction)(mutationThunk);\n    const isFulfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n    const lifecycleMap = {};\n    function resolveLifecycleEntry(cacheKey, data, meta) {\n        const lifecycle = lifecycleMap[cacheKey];\n        if (lifecycle?.valueResolved) {\n            lifecycle.valueResolved({\n                data,\n                meta\n            });\n            delete lifecycle.valueResolved;\n        }\n    }\n    function removeLifecycleEntry(cacheKey) {\n        const lifecycle = lifecycleMap[cacheKey];\n        if (lifecycle) {\n            delete lifecycleMap[cacheKey];\n            lifecycle.cacheEntryRemoved();\n        }\n    }\n    const handler = (action, mwApi, stateBefore)=>{\n        const cacheKey = getCacheKey(action);\n        function checkForNewCacheKey(endpointName, cacheKey2, requestId, originalArgs) {\n            const oldEntry = selectQueryEntry(stateBefore, cacheKey2);\n            const newEntry = selectQueryEntry(mwApi.getState(), cacheKey2);\n            if (!oldEntry && newEntry) {\n                handleNewKey(endpointName, originalArgs, cacheKey2, mwApi, requestId);\n            }\n        }\n        if (queryThunk.pending.match(action)) {\n            checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);\n        } else if (api.internalActions.cacheEntriesUpserted.match(action)) {\n            for (const { queryDescription, value } of action.payload){\n                const { endpointName, originalArgs, queryCacheKey } = queryDescription;\n                checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);\n                resolveLifecycleEntry(queryCacheKey, value, {});\n            }\n        } else if (mutationThunk.pending.match(action)) {\n            const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n            if (state) {\n                handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n            }\n        } else if (isFulfilledThunk(action)) {\n            resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);\n        } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n            removeLifecycleEntry(cacheKey);\n        } else if (api.util.resetApiState.match(action)) {\n            for (const cacheKey2 of Object.keys(lifecycleMap)){\n                removeLifecycleEntry(cacheKey2);\n            }\n        }\n    };\n    function getCacheKey(action) {\n        if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n        if (isMutationThunk(action)) {\n            return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n        }\n        if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n        if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n        return \"\";\n    }\n    function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n        const endpointDefinition = context.endpointDefinitions[endpointName];\n        const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n        if (!onCacheEntryAdded) return;\n        const lifecycle = {};\n        const cacheEntryRemoved = new Promise((resolve)=>{\n            lifecycle.cacheEntryRemoved = resolve;\n        });\n        const cacheDataLoaded = Promise.race([\n            new Promise((resolve)=>{\n                lifecycle.valueResolved = resolve;\n            }),\n            cacheEntryRemoved.then(()=>{\n                throw neverResolvedError;\n            })\n        ]);\n        cacheDataLoaded.catch(()=>{});\n        lifecycleMap[queryCacheKey] = lifecycle;\n        const selector = api.endpoints[endpointName].select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : queryCacheKey);\n        const extra = mwApi.dispatch((_, __, extra2)=>extra2);\n        const lifecycleApi = {\n            ...mwApi,\n            getCacheEntry: ()=>selector(mwApi.getState()),\n            requestId,\n            extra,\n            updateCachedData: isAnyQueryDefinition(endpointDefinition) ? (updateRecipe)=>mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n            cacheDataLoaded,\n            cacheEntryRemoved\n        };\n        const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n        Promise.resolve(runningHandler).catch((e)=>{\n            if (e === neverResolvedError) return;\n            throw e;\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = ({ api, context: { apiUid }, reducerPath })=>{\n    return (action, mwApi)=>{\n        if (api.util.resetApiState.match(action)) {\n            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n            if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === \"conflict\") {\n                console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === \"api\" ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : \"\"}`);\n            }\n        }\n    };\n};\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar buildInvalidationByTagsHandler = ({ reducerPath, context, context: { endpointDefinitions }, mutationThunk, queryThunk, api, assertTagType, refetchQuery, internalState })=>{\n    const { removeQueryResult } = api.internalActions;\n    const isThunkActionWithTags = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejectedWithValue)(mutationThunk));\n    const isQueryEnd = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isAnyOf)((0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(mutationThunk, queryThunk), (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(mutationThunk, queryThunk));\n    let pendingTagInvalidations = [];\n    const handler = (action, mwApi)=>{\n        if (isThunkActionWithTags(action)) {\n            invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n        } else if (isQueryEnd(action)) {\n            invalidateTags([], mwApi);\n        } else if (api.util.invalidateTags.match(action)) {\n            invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n        }\n    };\n    function hasPendingRequests(state) {\n        const { queries, mutations } = state;\n        for (const cacheRecord of [\n            queries,\n            mutations\n        ]){\n            for(const key in cacheRecord){\n                if (cacheRecord[key]?.status === \"pending\" /* pending */ ) return true;\n            }\n        }\n        return false;\n    }\n    function invalidateTags(newTags, mwApi) {\n        const rootState = mwApi.getState();\n        const state = rootState[reducerPath];\n        pendingTagInvalidations.push(...newTags);\n        if (state.config.invalidationBehavior === \"delayed\" && hasPendingRequests(state)) {\n            return;\n        }\n        const tags = pendingTagInvalidations;\n        pendingTagInvalidations = [];\n        if (tags.length === 0) return;\n        const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n        context.batch(()=>{\n            const valuesArray = Array.from(toInvalidate.values());\n            for (const { queryCacheKey } of valuesArray){\n                const querySubState = state.queries[queryCacheKey];\n                const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n                if (querySubState) {\n                    if (countObjectKeys(subscriptionSubState) === 0) {\n                        mwApi.dispatch(removeQueryResult({\n                            queryCacheKey\n                        }));\n                    } else if (querySubState.status !== \"uninitialized\" /* uninitialized */ ) {\n                        mwApi.dispatch(refetchQuery(querySubState));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = ({ reducerPath, queryThunk, api, refetchQuery, internalState })=>{\n    const currentPolls = {};\n    const handler = (action, mwApi)=>{\n        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n            updatePollingInterval(action.payload, mwApi);\n        }\n        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n            updatePollingInterval(action.meta.arg, mwApi);\n        }\n        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n            startNextPoll(action.meta.arg, mwApi);\n        }\n        if (api.util.resetApiState.match(action)) {\n            clearPolls();\n        }\n    };\n    function getCacheEntrySubscriptions(queryCacheKey, api2) {\n        const state = api2.getState()[reducerPath];\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */ ) return;\n        return subscriptions;\n    }\n    function startNextPoll({ queryCacheKey }, api2) {\n        const state = api2.getState()[reducerPath];\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */ ) return;\n        const { lowestPollingInterval, skipPollingIfUnfocused } = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) return;\n        const currentPoll = currentPolls[queryCacheKey];\n        if (currentPoll?.timeout) {\n            clearTimeout(currentPoll.timeout);\n            currentPoll.timeout = void 0;\n        }\n        const nextPollTimestamp = Date.now() + lowestPollingInterval;\n        currentPolls[queryCacheKey] = {\n            nextPollTimestamp,\n            pollingInterval: lowestPollingInterval,\n            timeout: setTimeout(()=>{\n                if (state.config.focused || !skipPollingIfUnfocused) {\n                    api2.dispatch(refetchQuery(querySubState));\n                }\n                startNextPoll({\n                    queryCacheKey\n                }, api2);\n            }, lowestPollingInterval)\n        };\n    }\n    function updatePollingInterval({ queryCacheKey }, api2) {\n        const state = api2.getState()[reducerPath];\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n        if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */ ) {\n            return;\n        }\n        const { lowestPollingInterval } = findLowestPollingInterval(subscriptions);\n        if (!Number.isFinite(lowestPollingInterval)) {\n            cleanupPollForKey(queryCacheKey);\n            return;\n        }\n        const currentPoll = currentPolls[queryCacheKey];\n        const nextPollTimestamp = Date.now() + lowestPollingInterval;\n        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n            startNextPoll({\n                queryCacheKey\n            }, api2);\n        }\n    }\n    function cleanupPollForKey(key) {\n        const existingPoll = currentPolls[key];\n        if (existingPoll?.timeout) {\n            clearTimeout(existingPoll.timeout);\n        }\n        delete currentPolls[key];\n    }\n    function clearPolls() {\n        for (const key of Object.keys(currentPolls)){\n            cleanupPollForKey(key);\n        }\n    }\n    function findLowestPollingInterval(subscribers = {}) {\n        let skipPollingIfUnfocused = false;\n        let lowestPollingInterval = Number.POSITIVE_INFINITY;\n        for(let key in subscribers){\n            if (!!subscribers[key].pollingInterval) {\n                lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n                skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n            }\n        }\n        return {\n            lowestPollingInterval,\n            skipPollingIfUnfocused\n        };\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar buildQueryLifecycleHandler = ({ api, context, queryThunk, mutationThunk })=>{\n    const isPendingThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isPending)(queryThunk, mutationThunk);\n    const isRejectedThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isRejected)(queryThunk, mutationThunk);\n    const isFullfilledThunk = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.isFulfilled)(queryThunk, mutationThunk);\n    const lifecycleMap = {};\n    const handler = (action, mwApi)=>{\n        if (isPendingThunk(action)) {\n            const { requestId, arg: { endpointName, originalArgs } } = action.meta;\n            const endpointDefinition = context.endpointDefinitions[endpointName];\n            const onQueryStarted = endpointDefinition?.onQueryStarted;\n            if (onQueryStarted) {\n                const lifecycle = {};\n                const queryFulfilled = new Promise((resolve, reject)=>{\n                    lifecycle.resolve = resolve;\n                    lifecycle.reject = reject;\n                });\n                queryFulfilled.catch(()=>{});\n                lifecycleMap[requestId] = lifecycle;\n                const selector = api.endpoints[endpointName].select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : requestId);\n                const extra = mwApi.dispatch((_, __, extra2)=>extra2);\n                const lifecycleApi = {\n                    ...mwApi,\n                    getCacheEntry: ()=>selector(mwApi.getState()),\n                    requestId,\n                    extra,\n                    updateCachedData: isAnyQueryDefinition(endpointDefinition) ? (updateRecipe)=>mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n                    queryFulfilled\n                };\n                onQueryStarted(originalArgs, lifecycleApi);\n            }\n        } else if (isFullfilledThunk(action)) {\n            const { requestId, baseQueryMeta } = action.meta;\n            lifecycleMap[requestId]?.resolve({\n                data: action.payload,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        } else if (isRejectedThunk(action)) {\n            const { requestId, rejectedWithValue, baseQueryMeta } = action.meta;\n            lifecycleMap[requestId]?.reject({\n                error: action.payload ?? action.error,\n                isUnhandledError: !rejectedWithValue,\n                meta: baseQueryMeta\n            });\n            delete lifecycleMap[requestId];\n        }\n    };\n    return handler;\n};\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = ({ reducerPath, context, api, refetchQuery, internalState })=>{\n    const { removeQueryResult } = api.internalActions;\n    const handler = (action, mwApi)=>{\n        if (onFocus.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnFocus\");\n        }\n        if (onOnline.match(action)) {\n            refetchValidQueries(mwApi, \"refetchOnReconnect\");\n        }\n    };\n    function refetchValidQueries(api2, type) {\n        const state = api2.getState()[reducerPath];\n        const queries = state.queries;\n        const subscriptions = internalState.currentSubscriptions;\n        context.batch(()=>{\n            for (const queryCacheKey of Object.keys(subscriptions)){\n                const querySubState = queries[queryCacheKey];\n                const subscriptionSubState = subscriptions[queryCacheKey];\n                if (!subscriptionSubState || !querySubState) continue;\n                const shouldRefetch = Object.values(subscriptionSubState).some((sub)=>sub[type] === true) || Object.values(subscriptionSubState).every((sub)=>sub[type] === void 0) && state.config[type];\n                if (shouldRefetch) {\n                    if (countObjectKeys(subscriptionSubState) === 0) {\n                        api2.dispatch(removeQueryResult({\n                            queryCacheKey\n                        }));\n                    } else if (querySubState.status !== \"uninitialized\" /* uninitialized */ ) {\n                        api2.dispatch(refetchQuery(querySubState));\n                    }\n                }\n            }\n        });\n    }\n    return handler;\n};\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n    const { reducerPath, queryThunk, api, context } = input;\n    const { apiUid } = context;\n    const actions = {\n        invalidateTags: (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createAction)(`${reducerPath}/invalidateTags`)\n    };\n    const isThisApiSliceAction = (action)=>action.type.startsWith(`${reducerPath}/`);\n    const handlerBuilders = [\n        buildDevCheckHandler,\n        buildCacheCollectionHandler,\n        buildInvalidationByTagsHandler,\n        buildPollingHandler,\n        buildCacheLifecycleHandler,\n        buildQueryLifecycleHandler\n    ];\n    const middleware = (mwApi)=>{\n        let initialized2 = false;\n        const internalState = {\n            currentSubscriptions: {}\n        };\n        const builderArgs = {\n            ...input,\n            internalState,\n            refetchQuery,\n            isThisApiSliceAction\n        };\n        const handlers = handlerBuilders.map((build)=>build(builderArgs));\n        const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n        const windowEventsHandler = buildWindowEventHandler(builderArgs);\n        return (next)=>{\n            return (action)=>{\n                if (!(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                    return next(action);\n                }\n                if (!initialized2) {\n                    initialized2 = true;\n                    mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n                }\n                const mwApiWithNext = {\n                    ...mwApi,\n                    next\n                };\n                const stateBefore = mwApi.getState();\n                const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n                let res;\n                if (actionShouldContinue) {\n                    res = next(action);\n                } else {\n                    res = internalProbeResult;\n                }\n                if (!!mwApi.getState()[reducerPath]) {\n                    windowEventsHandler(action, mwApiWithNext, stateBefore);\n                    if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n                        for (const handler of handlers){\n                            handler(action, mwApiWithNext, stateBefore);\n                        }\n                    }\n                }\n                return res;\n            };\n        };\n    };\n    return {\n        middleware,\n        actions\n    };\n    function refetchQuery(querySubState) {\n        return input.api.endpoints[querySubState.endpointName].initiate(querySubState.originalArgs, {\n            subscribe: false,\n            forceRefetch: true\n        });\n    }\n}\n// src/query/core/module.ts\nvar coreModuleName = /* @__PURE__ */ Symbol();\nvar coreModule = ({ createSelector: createSelector2 = reselect__WEBPACK_IMPORTED_MODULE_4__.createSelector } = {})=>({\n        name: coreModuleName,\n        init (api, { baseQuery, tagTypes, reducerPath, serializeQueryArgs, keepUnusedDataFor, refetchOnMountOrArgChange, refetchOnFocus, refetchOnReconnect, invalidationBehavior, onSchemaFailure, catchSchemaFailure, skipSchemaValidation }, context) {\n            (0,immer__WEBPACK_IMPORTED_MODULE_3__.enablePatches)();\n            assertCast(serializeQueryArgs);\n            const assertTagType = (tag)=>{\n                if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                    if (!tagTypes.includes(tag.type)) {\n                        console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n                    }\n                }\n                return tag;\n            };\n            Object.assign(api, {\n                reducerPath,\n                endpoints: {},\n                internalActions: {\n                    onOnline,\n                    onOffline,\n                    onFocus,\n                    onFocusLost\n                },\n                util: {}\n            });\n            const selectors = buildSelectors({\n                serializeQueryArgs,\n                reducerPath,\n                createSelector: createSelector2\n            });\n            const { selectInvalidatedBy, selectCachedArgsForQuery, buildQuerySelector, buildInfiniteQuerySelector, buildMutationSelector } = selectors;\n            safeAssign(api.util, {\n                selectInvalidatedBy,\n                selectCachedArgsForQuery\n            });\n            const { queryThunk, infiniteQueryThunk, mutationThunk, patchQueryData, updateQueryData, upsertQueryData, prefetch, buildMatchThunkActions } = buildThunks({\n                baseQuery,\n                reducerPath,\n                context,\n                api,\n                serializeQueryArgs,\n                assertTagType,\n                selectors,\n                onSchemaFailure,\n                catchSchemaFailure,\n                skipSchemaValidation\n            });\n            const { reducer, actions: sliceActions } = buildSlice({\n                context,\n                queryThunk,\n                infiniteQueryThunk,\n                mutationThunk,\n                serializeQueryArgs,\n                reducerPath,\n                assertTagType,\n                config: {\n                    refetchOnFocus,\n                    refetchOnReconnect,\n                    refetchOnMountOrArgChange,\n                    keepUnusedDataFor,\n                    reducerPath,\n                    invalidationBehavior\n                }\n            });\n            safeAssign(api.util, {\n                patchQueryData,\n                updateQueryData,\n                upsertQueryData,\n                prefetch,\n                resetApiState: sliceActions.resetApiState,\n                upsertQueryEntries: sliceActions.cacheEntriesUpserted\n            });\n            safeAssign(api.internalActions, sliceActions);\n            const { middleware, actions: middlewareActions } = buildMiddleware({\n                reducerPath,\n                context,\n                queryThunk,\n                mutationThunk,\n                infiniteQueryThunk,\n                api,\n                assertTagType,\n                selectors\n            });\n            safeAssign(api.util, middlewareActions);\n            safeAssign(api, {\n                reducer,\n                middleware\n            });\n            const { buildInitiateQuery, buildInitiateInfiniteQuery, buildInitiateMutation, getRunningMutationThunk, getRunningMutationsThunk, getRunningQueriesThunk, getRunningQueryThunk } = buildInitiate({\n                queryThunk,\n                mutationThunk,\n                infiniteQueryThunk,\n                api,\n                serializeQueryArgs,\n                context\n            });\n            safeAssign(api.util, {\n                getRunningMutationThunk,\n                getRunningMutationsThunk,\n                getRunningQueryThunk,\n                getRunningQueriesThunk\n            });\n            return {\n                name: coreModuleName,\n                injectEndpoint (endpointName, definition) {\n                    const anyApi = api;\n                    const endpoint = anyApi.endpoints[endpointName] ??= {};\n                    if (isQueryDefinition(definition)) {\n                        safeAssign(endpoint, {\n                            name: endpointName,\n                            select: buildQuerySelector(endpointName, definition),\n                            initiate: buildInitiateQuery(endpointName, definition)\n                        }, buildMatchThunkActions(queryThunk, endpointName));\n                    }\n                    if (isMutationDefinition(definition)) {\n                        safeAssign(endpoint, {\n                            name: endpointName,\n                            select: buildMutationSelector(),\n                            initiate: buildInitiateMutation(endpointName)\n                        }, buildMatchThunkActions(mutationThunk, endpointName));\n                    }\n                    if (isInfiniteQueryDefinition(definition)) {\n                        safeAssign(endpoint, {\n                            name: endpointName,\n                            select: buildInfiniteQuerySelector(endpointName, definition),\n                            initiate: buildInitiateInfiniteQuery(endpointName, definition)\n                        }, buildMatchThunkActions(queryThunk, endpointName));\n                    }\n                }\n            };\n        }\n    });\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */ buildCreateApi(coreModule());\n //# sourceMappingURL=rtk-query.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\n// src/index.ts\n\n\n\n// src/createDraftSafeSelector.ts\n\n\nvar createDraftSafeSelectorCreator = (...args)=>{\n    const createSelector2 = (0,reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator)(...args);\n    const createDraftSafeSelector2 = Object.assign((...args2)=>{\n        const selector = createSelector2(...args2);\n        const wrappedSelector = (value, ...rest)=>selector((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value, ...rest);\n        Object.assign(wrappedSelector, selector);\n        return wrappedSelector;\n    }, {\n        withTypes: ()=>createDraftSafeSelector2\n    });\n    return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = /* @__PURE__ */ createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\n// src/configureStore.ts\n\n// src/devtoolsExtension.ts\n\nvar composeWithDevTools =  false ? 0 : function() {\n    if (arguments.length === 0) return void 0;\n    if (typeof arguments[0] === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\n};\nvar devToolsEnhancer =  false ? 0 : function() {\n    return function(noop3) {\n        return noop3;\n    };\n};\n// src/getDefaultMiddleware.ts\n\n// src/createAction.ts\n\n// src/tsHelpers.ts\nvar hasMatchFunction = (v)=>{\n    return v && typeof v.match === \"function\";\n};\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n    function actionCreator(...args) {\n        if (prepareAction) {\n            let prepared = prepareAction(...args);\n            if (!prepared) {\n                throw new Error( false ? 0 : \"prepareAction did not return an object\");\n            }\n            return {\n                type,\n                payload: prepared.payload,\n                ...\"meta\" in prepared && {\n                    meta: prepared.meta\n                },\n                ...\"error\" in prepared && {\n                    error: prepared.error\n                }\n            };\n        }\n        return {\n            type,\n            payload: args[0]\n        };\n    }\n    actionCreator.toString = ()=>`${type}`;\n    actionCreator.type = type;\n    actionCreator.match = (action)=>(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\n    return actionCreator;\n}\nfunction isActionCreator(action) {\n    return typeof action === \"function\" && \"type\" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n    hasMatchFunction(action);\n}\nfunction isFSA(action) {\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n    return [\n        \"type\",\n        \"payload\",\n        \"error\",\n        \"meta\"\n    ].indexOf(key) > -1;\n}\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n    const splitType = type ? `${type}`.split(\"/\") : [];\n    const actionName = splitType[splitType.length - 1] || \"actionCreator\";\n    return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nfunction createActionCreatorInvariantMiddleware(options = {}) {\n    if (false) {}\n    const { isActionCreator: isActionCreator2 = isActionCreator } = options;\n    return ()=>(next)=>(action)=>{\n                if (isActionCreator2(action)) {\n                    console.warn(getMessage(action.type));\n                }\n                return next(action);\n            };\n}\n// src/utils.ts\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n    let elapsed = 0;\n    return {\n        measureTime (fn) {\n            const started = Date.now();\n            try {\n                return fn();\n            } finally{\n                const finished = Date.now();\n                elapsed += finished - started;\n            }\n        },\n        warnIfExceeded () {\n            if (elapsed > maxDelay) {\n                console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n            }\n        }\n    };\n}\nvar Tuple = class _Tuple extends Array {\n    constructor(...items){\n        super(...items);\n        Object.setPrototypeOf(this, _Tuple.prototype);\n    }\n    static get [Symbol.species]() {\n        return _Tuple;\n    }\n    concat(...arr) {\n        return super.concat.apply(this, arr);\n    }\n    prepend(...arr) {\n        if (arr.length === 1 && Array.isArray(arr[0])) {\n            return new _Tuple(...arr[0].concat(this));\n        }\n        return new _Tuple(...arr.concat(this));\n    }\n};\nfunction freezeDraftable(val) {\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, ()=>{}) : val;\n}\nfunction getOrInsertComputed(map, key, compute) {\n    if (map.has(key)) return map.get(key);\n    return map.set(key, compute(key)).get(key);\n}\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n    return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n    const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n    return {\n        detectMutations () {\n            return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n        }\n    };\n}\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */ new Set()) {\n    const tracked = {\n        value: obj\n    };\n    if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n        checkedObjects.add(obj);\n        tracked.children = {};\n        for(const key in obj){\n            const childPath = path ? path + \".\" + key : key;\n            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n                continue;\n            }\n            tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n        }\n    }\n    return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\n    const prevObj = trackedProperty ? trackedProperty.value : void 0;\n    const sameRef = prevObj === obj;\n    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n        return {\n            wasMutated: true,\n            path\n        };\n    }\n    if (isImmutable(prevObj) || isImmutable(obj)) {\n        return {\n            wasMutated: false\n        };\n    }\n    const keysToDetect = {};\n    for(let key in trackedProperty.children){\n        keysToDetect[key] = true;\n    }\n    for(let key in obj){\n        keysToDetect[key] = true;\n    }\n    const hasIgnoredPaths = ignoredPaths.length > 0;\n    for(let key in keysToDetect){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            const hasMatches = ignoredPaths.some((ignored)=>{\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                continue;\n            }\n        }\n        const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n        if (result.wasMutated) {\n            return result;\n        }\n    }\n    return {\n        wasMutated: false\n    };\n}\nfunction createImmutableStateInvariantMiddleware(options = {}) {\n    if (false) {} else {\n        let stringify2 = function(obj, serializer, indent, decycler) {\n            return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n        }, getSerialize2 = function(serializer, decycler) {\n            let stack = [], keys = [];\n            if (!decycler) decycler = function(_, value) {\n                if (stack[0] === value) return \"[Circular ~]\";\n                return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n            };\n            return function(key, value) {\n                if (stack.length > 0) {\n                    var thisPos = stack.indexOf(this);\n                    ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n                    ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n                    if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n                } else stack.push(value);\n                return serializer == null ? value : serializer.call(this, key, value);\n            };\n        };\n        var stringify = stringify2, getSerialize = getSerialize2;\n        let { isImmutable = isImmutableDefault, ignoredPaths, warnAfter = 32 } = options;\n        const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n        return ({ getState })=>{\n            let state = getState();\n            let tracker = track(state);\n            let result;\n            return (next)=>(action)=>{\n                    const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n                    measureUtils.measureTime(()=>{\n                        state = getState();\n                        result = tracker.detectMutations();\n                        tracker = track(state);\n                        if (result.wasMutated) {\n                            throw new Error( false ? 0 : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n                        }\n                    });\n                    const dispatchedAction = next(action);\n                    measureUtils.measureTime(()=>{\n                        state = getState();\n                        result = tracker.detectMutations();\n                        tracker = track(state);\n                        if (result.wasMutated) {\n                            throw new Error( false ? 0 : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n                        }\n                    });\n                    measureUtils.warnIfExceeded();\n                    return dispatchedAction;\n                };\n        };\n    }\n}\n// src/serializableStateInvariantMiddleware.ts\n\nfunction isPlain(val) {\n    const type = typeof val;\n    return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\n}\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {\n    let foundNestedSerializable;\n    if (!isSerializable(value)) {\n        return {\n            keyPath: path || \"<root>\",\n            value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    if (cache?.has(value)) return false;\n    const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n    const hasIgnoredPaths = ignoredPaths.length > 0;\n    for (const [key, nestedValue] of entries){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (hasIgnoredPaths) {\n            const hasMatches = ignoredPaths.some((ignored)=>{\n                if (ignored instanceof RegExp) {\n                    return ignored.test(nestedPath);\n                }\n                return nestedPath === ignored;\n            });\n            if (hasMatches) {\n                continue;\n            }\n        }\n        if (!isSerializable(nestedValue)) {\n            return {\n                keyPath: nestedPath,\n                value: nestedValue\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n            if (foundNestedSerializable) {\n                return foundNestedSerializable;\n            }\n        }\n    }\n    if (cache && isNestedFrozen(value)) cache.add(value);\n    return false;\n}\nfunction isNestedFrozen(value) {\n    if (!Object.isFrozen(value)) return false;\n    for (const nestedValue of Object.values(value)){\n        if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n        if (!isNestedFrozen(nestedValue)) return false;\n    }\n    return true;\n}\nfunction createSerializableStateInvariantMiddleware(options = {}) {\n    if (false) {} else {\n        const { isSerializable = isPlain, getEntries, ignoredActions = [], ignoredActionPaths = [\n            \"meta.arg\",\n            \"meta.baseQueryMeta\"\n        ], ignoredPaths = [], warnAfter = 32, ignoreState = false, ignoreActions = false, disableCache = false } = options;\n        const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;\n        return (storeAPI)=>(next)=>(action)=>{\n                    if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                        return next(action);\n                    }\n                    const result = next(action);\n                    const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n                    if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n                        measureUtils.measureTime(()=>{\n                            const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\n                            if (foundActionNonSerializableValue) {\n                                const { keyPath, value } = foundActionNonSerializableValue;\n                                console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n                            }\n                        });\n                    }\n                    if (!ignoreState) {\n                        measureUtils.measureTime(()=>{\n                            const state = storeAPI.getState();\n                            const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\n                            if (foundStateNonSerializableValue) {\n                                const { keyPath, value } = foundStateNonSerializableValue;\n                                console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n                            }\n                        });\n                        measureUtils.warnIfExceeded();\n                    }\n                    return result;\n                };\n    }\n}\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n    return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = ()=>function getDefaultMiddleware(options) {\n        const { thunk = true, immutableCheck = true, serializableCheck = true, actionCreatorCheck = true } = options ?? {};\n        let middlewareArray = new Tuple();\n        if (thunk) {\n            if (isBoolean(thunk)) {\n                middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\n            } else {\n                middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\n            }\n        }\n        if (true) {\n            if (immutableCheck) {\n                let immutableOptions = {};\n                if (!isBoolean(immutableCheck)) {\n                    immutableOptions = immutableCheck;\n                }\n                middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n            }\n            if (serializableCheck) {\n                let serializableOptions = {};\n                if (!isBoolean(serializableCheck)) {\n                    serializableOptions = serializableCheck;\n                }\n                middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n            }\n            if (actionCreatorCheck) {\n                let actionCreatorOptions = {};\n                if (!isBoolean(actionCreatorCheck)) {\n                    actionCreatorOptions = actionCreatorCheck;\n                }\n                middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n            }\n        }\n        return middlewareArray;\n    };\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = ()=>(payload)=>({\n            payload,\n            meta: {\n                [SHOULD_AUTOBATCH]: true\n            }\n        });\nvar createQueueWithTimer = (timeout)=>{\n    return (notify)=>{\n        setTimeout(notify, timeout);\n    };\n};\nvar autoBatchEnhancer = (options = {\n    type: \"raf\"\n})=>(next)=>(...args)=>{\n            const store = next(...args);\n            let notifying = true;\n            let shouldNotifyAtEndOfTick = false;\n            let notificationQueued = false;\n            const listeners = /* @__PURE__ */ new Set();\n            const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\n             false ? 0 : createQueueWithTimer(10) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n            const notifyListeners = ()=>{\n                notificationQueued = false;\n                if (shouldNotifyAtEndOfTick) {\n                    shouldNotifyAtEndOfTick = false;\n                    listeners.forEach((l)=>l());\n                }\n            };\n            return Object.assign({}, store, {\n                // Override the base `store.subscribe` method to keep original listeners\n                // from running if we're delaying notifications\n                subscribe (listener2) {\n                    const wrappedListener = ()=>notifying && listener2();\n                    const unsubscribe = store.subscribe(wrappedListener);\n                    listeners.add(listener2);\n                    return ()=>{\n                        unsubscribe();\n                        listeners.delete(listener2);\n                    };\n                },\n                // Override the base `store.dispatch` method so that we can check actions\n                // for the `shouldAutoBatch` flag and determine if batching is active\n                dispatch (action) {\n                    try {\n                        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n                        shouldNotifyAtEndOfTick = !notifying;\n                        if (shouldNotifyAtEndOfTick) {\n                            if (!notificationQueued) {\n                                notificationQueued = true;\n                                queueCallback(notifyListeners);\n                            }\n                        }\n                        return store.dispatch(action);\n                    } finally{\n                        notifying = true;\n                    }\n                }\n            });\n        };\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = (middlewareEnhancer)=>function getDefaultEnhancers(options) {\n        const { autoBatch = true } = options ?? {};\n        let enhancerArray = new Tuple(middlewareEnhancer);\n        if (autoBatch) {\n            enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\n        }\n        return enhancerArray;\n    };\n// src/configureStore.ts\nfunction configureStore(options) {\n    const getDefaultMiddleware = buildGetDefaultMiddleware();\n    const { reducer = void 0, middleware, devTools = true, duplicateMiddlewareCheck = true, preloadedState = void 0, enhancers = void 0 } = options || {};\n    let rootReducer;\n    if (typeof reducer === \"function\") {\n        rootReducer = reducer;\n    } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\n        rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\n    } else {\n        throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n    }\n    if ( true && middleware && typeof middleware !== \"function\") {\n        throw new Error( false ? 0 : \"`middleware` field must be a callback\");\n    }\n    let finalMiddleware;\n    if (typeof middleware === \"function\") {\n        finalMiddleware = middleware(getDefaultMiddleware);\n        if ( true && !Array.isArray(finalMiddleware)) {\n            throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\n        }\n    } else {\n        finalMiddleware = getDefaultMiddleware();\n    }\n    if ( true && finalMiddleware.some((item)=>typeof item !== \"function\")) {\n        throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\n    }\n    if ( true && duplicateMiddlewareCheck) {\n        let middlewareReferences = /* @__PURE__ */ new Set();\n        finalMiddleware.forEach((middleware2)=>{\n            if (middlewareReferences.has(middleware2)) {\n                throw new Error( false ? 0 : \"Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.\");\n            }\n            middlewareReferences.add(middleware2);\n        });\n    }\n    let finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\n    if (devTools) {\n        finalCompose = composeWithDevTools({\n            // Enable capture of stack traces for dispatched Redux actions\n            trace: \"development\" !== \"production\",\n            ...typeof devTools === \"object\" && devTools\n        });\n    }\n    const middlewareEnhancer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware)(...finalMiddleware);\n    const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n    if ( true && enhancers && typeof enhancers !== \"function\") {\n        throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\n    }\n    let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n    if ( true && !Array.isArray(storeEnhancers)) {\n        throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\n    }\n    if ( true && storeEnhancers.some((item)=>typeof item !== \"function\")) {\n        throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\n    }\n    if ( true && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n        console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n    }\n    const composedEnhancer = finalCompose(...storeEnhancers);\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\n}\n// src/createReducer.ts\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n    const actionsMap = {};\n    const actionMatchers = [];\n    let defaultCaseReducer;\n    const builder = {\n        addCase (typeOrActionCreator, reducer) {\n            if (true) {\n                if (actionMatchers.length > 0) {\n                    throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n                }\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n            if (!type) {\n                throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\n            }\n            if (type in actionsMap) {\n                throw new Error( false ? 0 : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\n            }\n            actionsMap[type] = reducer;\n            return builder;\n        },\n        addMatcher (matcher, reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n                }\n            }\n            actionMatchers.push({\n                matcher,\n                reducer\n            });\n            return builder;\n        },\n        addDefaultCase (reducer) {\n            if (true) {\n                if (defaultCaseReducer) {\n                    throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\n                }\n            }\n            defaultCaseReducer = reducer;\n            return builder;\n        }\n    };\n    builderCallback(builder);\n    return [\n        actionsMap,\n        actionMatchers,\n        defaultCaseReducer\n    ];\n}\n// src/createReducer.ts\nfunction isStateFunction(x) {\n    return typeof x === \"function\";\n}\nfunction createReducer(initialState, mapOrBuilderCallback) {\n    if (true) {\n        if (typeof mapOrBuilderCallback === \"object\") {\n            throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n        }\n    }\n    let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n    let getInitialState;\n    if (isStateFunction(initialState)) {\n        getInitialState = ()=>freezeDraftable(initialState());\n    } else {\n        const frozenInitialState = freezeDraftable(initialState);\n        getInitialState = ()=>frozenInitialState;\n    }\n    function reducer(state = getInitialState(), action) {\n        let caseReducers = [\n            actionsMap[action.type],\n            ...finalActionMatchers.filter(({ matcher })=>matcher(action)).map(({ reducer: reducer2 })=>reducer2)\n        ];\n        if (caseReducers.filter((cr)=>!!cr).length === 0) {\n            caseReducers = [\n                finalDefaultCaseReducer\n            ];\n        }\n        return caseReducers.reduce((previousState, caseReducer)=>{\n            if (caseReducer) {\n                if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\n                    const draft = previousState;\n                    const result = caseReducer(draft, action);\n                    if (result === void 0) {\n                        return previousState;\n                    }\n                    return result;\n                } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\n                    const result = caseReducer(previousState, action);\n                    if (result === void 0) {\n                        if (previousState === null) {\n                            return previousState;\n                        }\n                        throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n                    }\n                    return result;\n                } else {\n                    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, (draft)=>{\n                        return caseReducer(draft, action);\n                    });\n                }\n            }\n            return previousState;\n        }, state);\n    }\n    reducer.getInitialState = getInitialState;\n    return reducer;\n}\n// src/matchers.ts\nvar matches = (matcher, action)=>{\n    if (hasMatchFunction(matcher)) {\n        return matcher.match(action);\n    } else {\n        return matcher(action);\n    }\n};\nfunction isAnyOf(...matchers) {\n    return (action)=>{\n        return matchers.some((matcher)=>matches(matcher, action));\n    };\n}\nfunction isAllOf(...matchers) {\n    return (action)=>{\n        return matchers.every((matcher)=>matches(matcher, action));\n    };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n    if (!action || !action.meta) return false;\n    const hasValidRequestId = typeof action.meta.requestId === \"string\";\n    const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n    return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n    return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"pending\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isPending()(asyncThunks[0]);\n    }\n    return isAnyOf(...asyncThunks.map((asyncThunk)=>asyncThunk.pending));\n}\nfunction isRejected(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"rejected\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejected()(asyncThunks[0]);\n    }\n    return isAnyOf(...asyncThunks.map((asyncThunk)=>asyncThunk.rejected));\n}\nfunction isRejectedWithValue(...asyncThunks) {\n    const hasFlag = (action)=>{\n        return action && action.meta && action.meta.rejectedWithValue;\n    };\n    if (asyncThunks.length === 0) {\n        return isAllOf(isRejected(...asyncThunks), hasFlag);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isRejectedWithValue()(asyncThunks[0]);\n    }\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\n}\nfunction isFulfilled(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"fulfilled\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isFulfilled()(asyncThunks[0]);\n    }\n    return isAnyOf(...asyncThunks.map((asyncThunk)=>asyncThunk.fulfilled));\n}\nfunction isAsyncThunkAction(...asyncThunks) {\n    if (asyncThunks.length === 0) {\n        return (action)=>hasExpectedRequestMetadata(action, [\n                \"pending\",\n                \"fulfilled\",\n                \"rejected\"\n            ]);\n    }\n    if (!isAsyncThunkArray(asyncThunks)) {\n        return isAsyncThunkAction()(asyncThunks[0]);\n    }\n    return isAnyOf(...asyncThunks.flatMap((asyncThunk)=>[\n            asyncThunk.pending,\n            asyncThunk.rejected,\n            asyncThunk.fulfilled\n        ]));\n}\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = (size = 21)=>{\n    let id = \"\";\n    let i = size;\n    while(i--){\n        id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n};\n// src/createAsyncThunk.ts\nvar commonProperties = [\n    \"name\",\n    \"message\",\n    \"stack\",\n    \"code\"\n];\nvar RejectWithValue = class {\n    constructor(payload, meta){\n        this.payload = payload;\n        this.meta = meta;\n    }\n};\nvar FulfillWithMeta = class {\n    constructor(payload, meta){\n        this.payload = payload;\n        this.meta = meta;\n    }\n};\nvar miniSerializeError = (value)=>{\n    if (typeof value === \"object\" && value !== null) {\n        const simpleError = {};\n        for (const property of commonProperties){\n            if (typeof value[property] === \"string\") {\n                simpleError[property] = value[property];\n            }\n        }\n        return simpleError;\n    }\n    return {\n        message: String(value)\n    };\n};\nvar externalAbortMessage = \"External signal was aborted\";\nvar createAsyncThunk = /* @__PURE__ */ (()=>{\n    function createAsyncThunk2(typePrefix, payloadCreator, options) {\n        const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta)=>({\n                payload,\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    requestStatus: \"fulfilled\"\n                }\n            }));\n        const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta)=>({\n                payload: void 0,\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    requestStatus: \"pending\"\n                }\n            }));\n        const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta)=>({\n                payload,\n                error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n                meta: {\n                    ...meta || {},\n                    arg,\n                    requestId,\n                    rejectedWithValue: !!payload,\n                    requestStatus: \"rejected\",\n                    aborted: error?.name === \"AbortError\",\n                    condition: error?.name === \"ConditionError\"\n                }\n            }));\n        function actionCreator(arg, { signal } = {}) {\n            return (dispatch, getState, extra)=>{\n                const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n                const abortController = new AbortController();\n                let abortHandler;\n                let abortReason;\n                function abort(reason) {\n                    abortReason = reason;\n                    abortController.abort();\n                }\n                if (signal) {\n                    if (signal.aborted) {\n                        abort(externalAbortMessage);\n                    } else {\n                        signal.addEventListener(\"abort\", ()=>abort(externalAbortMessage), {\n                            once: true\n                        });\n                    }\n                }\n                const promise = async function() {\n                    let finalAction;\n                    try {\n                        let conditionResult = options?.condition?.(arg, {\n                            getState,\n                            extra\n                        });\n                        if (isThenable(conditionResult)) {\n                            conditionResult = await conditionResult;\n                        }\n                        if (conditionResult === false || abortController.signal.aborted) {\n                            throw {\n                                name: \"ConditionError\",\n                                message: \"Aborted due to condition callback returning false.\"\n                            };\n                        }\n                        const abortedPromise = new Promise((_, reject)=>{\n                            abortHandler = ()=>{\n                                reject({\n                                    name: \"AbortError\",\n                                    message: abortReason || \"Aborted\"\n                                });\n                            };\n                            abortController.signal.addEventListener(\"abort\", abortHandler);\n                        });\n                        dispatch(pending(requestId, arg, options?.getPendingMeta?.({\n                            requestId,\n                            arg\n                        }, {\n                            getState,\n                            extra\n                        })));\n                        finalAction = await Promise.race([\n                            abortedPromise,\n                            Promise.resolve(payloadCreator(arg, {\n                                dispatch,\n                                getState,\n                                extra,\n                                requestId,\n                                signal: abortController.signal,\n                                abort,\n                                rejectWithValue: (value, meta)=>{\n                                    return new RejectWithValue(value, meta);\n                                },\n                                fulfillWithValue: (value, meta)=>{\n                                    return new FulfillWithMeta(value, meta);\n                                }\n                            })).then((result)=>{\n                                if (result instanceof RejectWithValue) {\n                                    throw result;\n                                }\n                                if (result instanceof FulfillWithMeta) {\n                                    return fulfilled(result.payload, requestId, arg, result.meta);\n                                }\n                                return fulfilled(result, requestId, arg);\n                            })\n                        ]);\n                    } catch (err) {\n                        finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\n                    } finally{\n                        if (abortHandler) {\n                            abortController.signal.removeEventListener(\"abort\", abortHandler);\n                        }\n                    }\n                    const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n                    if (!skipDispatch) {\n                        dispatch(finalAction);\n                    }\n                    return finalAction;\n                }();\n                return Object.assign(promise, {\n                    abort,\n                    requestId,\n                    arg,\n                    unwrap () {\n                        return promise.then(unwrapResult);\n                    }\n                });\n            };\n        }\n        return Object.assign(actionCreator, {\n            pending,\n            rejected,\n            fulfilled,\n            settled: isAnyOf(rejected, fulfilled),\n            typePrefix\n        });\n    }\n    createAsyncThunk2.withTypes = ()=>createAsyncThunk2;\n    return createAsyncThunk2;\n})();\nfunction unwrapResult(action) {\n    if (action.meta && action.meta.rejectedWithValue) {\n        throw action.payload;\n    }\n    if (action.error) {\n        throw action.error;\n    }\n    return action.payload;\n}\nfunction isThenable(value) {\n    return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */ Symbol.for(\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = {\n    [asyncThunkSymbol]: createAsyncThunk\n};\nvar ReducerType = /* @__PURE__ */ ((ReducerType2)=>{\n    ReducerType2[\"reducer\"] = \"reducer\";\n    ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n    ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n    return ReducerType2;\n})(ReducerType || {});\nfunction getType(slice, actionKey) {\n    return `${slice}/${actionKey}`;\n}\nfunction buildCreateSlice({ creators } = {}) {\n    const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n    return function createSlice2(options) {\n        const { name, reducerPath = name } = options;\n        if (!name) {\n            throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\n        }\n        if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n            if (options.initialState === void 0) {\n                console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n            }\n        }\n        const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n        const reducerNames = Object.keys(reducers);\n        const context = {\n            sliceCaseReducersByName: {},\n            sliceCaseReducersByType: {},\n            actionCreators: {},\n            sliceMatchers: []\n        };\n        const contextMethods = {\n            addCase (typeOrActionCreator, reducer2) {\n                const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n                if (!type) {\n                    throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\n                }\n                if (type in context.sliceCaseReducersByType) {\n                    throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n                }\n                context.sliceCaseReducersByType[type] = reducer2;\n                return contextMethods;\n            },\n            addMatcher (matcher, reducer2) {\n                context.sliceMatchers.push({\n                    matcher,\n                    reducer: reducer2\n                });\n                return contextMethods;\n            },\n            exposeAction (name2, actionCreator) {\n                context.actionCreators[name2] = actionCreator;\n                return contextMethods;\n            },\n            exposeCaseReducer (name2, reducer2) {\n                context.sliceCaseReducersByName[name2] = reducer2;\n                return contextMethods;\n            }\n        };\n        reducerNames.forEach((reducerName)=>{\n            const reducerDefinition = reducers[reducerName];\n            const reducerDetails = {\n                reducerName,\n                type: getType(name, reducerName),\n                createNotation: typeof options.reducers === \"function\"\n            };\n            if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n                handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n            } else {\n                handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n            }\n        });\n        function buildReducer() {\n            if (true) {\n                if (typeof options.extraReducers === \"object\") {\n                    throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n                }\n            }\n            const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [\n                options.extraReducers\n            ];\n            const finalCaseReducers = {\n                ...extraReducers,\n                ...context.sliceCaseReducersByType\n            };\n            return createReducer(options.initialState, (builder)=>{\n                for(let key in finalCaseReducers){\n                    builder.addCase(key, finalCaseReducers[key]);\n                }\n                for (let sM of context.sliceMatchers){\n                    builder.addMatcher(sM.matcher, sM.reducer);\n                }\n                for (let m of actionMatchers){\n                    builder.addMatcher(m.matcher, m.reducer);\n                }\n                if (defaultCaseReducer) {\n                    builder.addDefaultCase(defaultCaseReducer);\n                }\n            });\n        }\n        const selectSelf = (state)=>state;\n        const injectedSelectorCache = /* @__PURE__ */ new Map();\n        const injectedStateCache = /* @__PURE__ */ new WeakMap();\n        let _reducer;\n        function reducer(state, action) {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer(state, action);\n        }\n        function getInitialState() {\n            if (!_reducer) _reducer = buildReducer();\n            return _reducer.getInitialState();\n        }\n        function makeSelectorProps(reducerPath2, injected = false) {\n            function selectSlice(state) {\n                let sliceState = state[reducerPath2];\n                if (typeof sliceState === \"undefined\") {\n                    if (injected) {\n                        sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\n                    } else if (true) {\n                        throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\n                    }\n                }\n                return sliceState;\n            }\n            function getSelectors(selectState = selectSelf) {\n                const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, ()=>/* @__PURE__ */ new WeakMap());\n                return getOrInsertComputed(selectorCache, selectState, ()=>{\n                    const map = {};\n                    for (const [name2, selector] of Object.entries(options.selectors ?? {})){\n                        map[name2] = wrapSelector(selector, selectState, ()=>getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\n                    }\n                    return map;\n                });\n            }\n            return {\n                reducerPath: reducerPath2,\n                getSelectors,\n                get selectors () {\n                    return getSelectors(selectSlice);\n                },\n                selectSlice\n            };\n        }\n        const slice = {\n            name,\n            reducer,\n            actions: context.actionCreators,\n            caseReducers: context.sliceCaseReducersByName,\n            getInitialState,\n            ...makeSelectorProps(reducerPath),\n            injectInto (injectable, { reducerPath: pathOpt, ...config } = {}) {\n                const newReducerPath = pathOpt ?? reducerPath;\n                injectable.inject({\n                    reducerPath: newReducerPath,\n                    reducer\n                }, config);\n                return {\n                    ...slice,\n                    ...makeSelectorProps(newReducerPath, true)\n                };\n            }\n        };\n        return slice;\n    };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n    function wrapper(rootState, ...args) {\n        let sliceState = selectState(rootState);\n        if (typeof sliceState === \"undefined\") {\n            if (injected) {\n                sliceState = getInitialState();\n            } else if (true) {\n                throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\n            }\n        }\n        return selector(sliceState, ...args);\n    }\n    wrapper.unwrapped = selector;\n    return wrapper;\n}\nvar createSlice = /* @__PURE__ */ buildCreateSlice();\nfunction buildReducerCreators() {\n    function asyncThunk(payloadCreator, config) {\n        return {\n            _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */ ,\n            payloadCreator,\n            ...config\n        };\n    }\n    asyncThunk.withTypes = ()=>asyncThunk;\n    return {\n        reducer (caseReducer) {\n            return Object.assign({\n                // hack so the wrapping function has the same name as the original\n                // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n                [caseReducer.name] (...args) {\n                    return caseReducer(...args);\n                }\n            }[caseReducer.name], {\n                _reducerDefinitionType: \"reducer\" /* reducer */ \n            });\n        },\n        preparedReducer (prepare, reducer) {\n            return {\n                _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */ ,\n                prepare,\n                reducer\n            };\n        },\n        asyncThunk\n    };\n}\nfunction handleNormalReducerDefinition({ type, reducerName, createNotation }, maybeReducerWithPrepare, context) {\n    let caseReducer;\n    let prepareCallback;\n    if (\"reducer\" in maybeReducerWithPrepare) {\n        if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n            throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n        }\n        caseReducer = maybeReducerWithPrepare.reducer;\n        prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n        caseReducer = maybeReducerWithPrepare;\n    }\n    context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n    return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */ ;\n}\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n    return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */ ;\n}\nfunction handleThunkCaseReducerDefinition({ type, reducerName }, reducerDefinition, context, cAT) {\n    if (!cAT) {\n        throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n    }\n    const { payloadCreator, fulfilled, pending, rejected, settled, options } = reducerDefinition;\n    const thunk = cAT(type, payloadCreator, options);\n    context.exposeAction(reducerName, thunk);\n    if (fulfilled) {\n        context.addCase(thunk.fulfilled, fulfilled);\n    }\n    if (pending) {\n        context.addCase(thunk.pending, pending);\n    }\n    if (rejected) {\n        context.addCase(thunk.rejected, rejected);\n    }\n    if (settled) {\n        context.addMatcher(thunk.settled, settled);\n    }\n    context.exposeCaseReducer(reducerName, {\n        fulfilled: fulfilled || noop,\n        pending: pending || noop,\n        rejected: rejected || noop,\n        settled: settled || noop\n    });\n}\nfunction noop() {}\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {}\n    };\n}\nfunction createInitialStateFactory(stateAdapter) {\n    function getInitialState(additionalState = {}, entities) {\n        const state = Object.assign(getInitialEntityState(), additionalState);\n        return entities ? stateAdapter.setAll(state, entities) : state;\n    }\n    return {\n        getInitialState\n    };\n}\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n    function getSelectors(selectState, options = {}) {\n        const { createSelector: createSelector2 = createDraftSafeSelector } = options;\n        const selectIds = (state)=>state.ids;\n        const selectEntities = (state)=>state.entities;\n        const selectAll = createSelector2(selectIds, selectEntities, (ids, entities)=>ids.map((id)=>entities[id]));\n        const selectId = (_, id)=>id;\n        const selectById = (entities, id)=>entities[id];\n        const selectTotal = createSelector2(selectIds, (ids)=>ids.length);\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n                selectById: createSelector2(selectEntities, selectId, selectById)\n            };\n        }\n        const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n        return {\n            selectIds: createSelector2(selectState, selectIds),\n            selectEntities: selectGlobalizedEntities,\n            selectAll: createSelector2(selectState, selectAll),\n            selectTotal: createSelector2(selectState, selectTotal),\n            selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n        };\n    }\n    return {\n        getSelectors\n    };\n}\n// src/entities/state_adapter.ts\n\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\nfunction createSingleArgumentStateOperator(mutator) {\n    const operator = createStateOperator((_, state)=>mutator(state));\n    return function operation(state) {\n        return operator(state, void 0);\n    };\n}\nfunction createStateOperator(mutator) {\n    return function operation(state, arg) {\n        function isPayloadActionArgument(arg2) {\n            return isFSA(arg2);\n        }\n        const runMutator = (draft)=>{\n            if (isPayloadActionArgument(arg)) {\n                mutator(arg.payload, draft);\n            } else {\n                mutator(arg, draft);\n            }\n        };\n        if (isDraftTyped(state)) {\n            runMutator(state);\n            return state;\n        }\n        return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\n    };\n}\n// src/entities/utils.ts\n\nfunction selectIdValue(entity, selectId) {\n    const key = selectId(entity);\n    if ( true && key === void 0) {\n        console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n    }\n    return key;\n}\nfunction ensureEntitiesArray(entities) {\n    if (!Array.isArray(entities)) {\n        entities = Object.values(entities);\n    }\n    return entities;\n}\nfunction getCurrent(value) {\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    const existingIdsArray = getCurrent(state.ids);\n    const existingIds = new Set(existingIdsArray);\n    const added = [];\n    const addedIds = /* @__PURE__ */ new Set([]);\n    const updated = [];\n    for (const entity of newEntities){\n        const id = selectIdValue(entity, selectId);\n        if (existingIds.has(id) || addedIds.has(id)) {\n            updated.push({\n                id,\n                changes: entity\n            });\n        } else {\n            addedIds.add(id);\n            added.push(entity);\n        }\n    }\n    return [\n        added,\n        updated,\n        existingIdsArray\n    ];\n}\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n    }\n    function addManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for (const entity of newEntities){\n            addOneMutably(entity, state);\n        }\n    }\n    function setOneMutably(entity, state) {\n        const key = selectIdValue(entity, selectId);\n        if (!(key in state.entities)) {\n            state.ids.push(key);\n        }\n        ;\n        state.entities[key] = entity;\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        for (const entity of newEntities){\n            setOneMutably(entity, state);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(newEntities, state);\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([\n            key\n        ], state);\n    }\n    function removeManyMutably(keys, state) {\n        let didMutate = false;\n        keys.forEach((key)=>{\n            if (key in state.entities) {\n                delete state.entities[key];\n                didMutate = true;\n            }\n        });\n        if (didMutate) {\n            state.ids = state.ids.filter((id)=>id in state.entities);\n        }\n    }\n    function removeAllMutably(state) {\n        Object.assign(state, {\n            ids: [],\n            entities: {}\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        const original3 = state.entities[update.id];\n        if (original3 === void 0) {\n            return false;\n        }\n        const updated = Object.assign({}, original3, update.changes);\n        const newKey = selectIdValue(updated, selectId);\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        ;\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        const newKeys = {};\n        const updatesPerEntity = {};\n        updates.forEach((update)=>{\n            if (update.id in state.entities) {\n                updatesPerEntity[update.id] = {\n                    id: update.id,\n                    // Spreads ignore falsy values, so this works even if there isn't\n                    // an existing update already at this key\n                    changes: {\n                        ...updatesPerEntity[update.id]?.changes,\n                        ...update.changes\n                    }\n                };\n            }\n        });\n        updates = Object.values(updatesPerEntity);\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            const didMutateIds = updates.filter((update)=>takeNewKey(newKeys, update, state)).length > 0;\n            if (didMutateIds) {\n                state.ids = Object.values(state.entities).map((e)=>selectIdValue(e, selectId));\n            }\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\n        addManyMutably(added, state);\n        updateManyMutably(updated, state);\n    }\n    return {\n        removeAll: createSingleArgumentStateOperator(removeAllMutably),\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably)\n    };\n}\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n    let lowIndex = 0;\n    let highIndex = sortedItems.length;\n    while(lowIndex < highIndex){\n        let middleIndex = lowIndex + highIndex >>> 1;\n        const currentItem = sortedItems[middleIndex];\n        const res = comparisonFunction(item, currentItem);\n        if (res >= 0) {\n            lowIndex = middleIndex + 1;\n        } else {\n            highIndex = middleIndex;\n        }\n    }\n    return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n    const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n    sortedItems.splice(insertAtIndex, 0, item);\n    return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    function addOneMutably(entity, state) {\n        return addManyMutably([\n            entity\n        ], state);\n    }\n    function addManyMutably(newEntities, state, existingIds) {\n        newEntities = ensureEntitiesArray(newEntities);\n        const existingKeys = new Set(existingIds ?? getCurrent(state.ids));\n        const models = newEntities.filter((model)=>!existingKeys.has(selectIdValue(model, selectId)));\n        if (models.length !== 0) {\n            mergeFunction(state, models);\n        }\n    }\n    function setOneMutably(entity, state) {\n        return setManyMutably([\n            entity\n        ], state);\n    }\n    function setManyMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        if (newEntities.length !== 0) {\n            for (const item of newEntities){\n                delete state.entities[selectId(item)];\n            }\n            mergeFunction(state, newEntities);\n        }\n    }\n    function setAllMutably(newEntities, state) {\n        newEntities = ensureEntitiesArray(newEntities);\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(newEntities, state, []);\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([\n            update\n        ], state);\n    }\n    function updateManyMutably(updates, state) {\n        let appliedUpdates = false;\n        let replacedIds = false;\n        for (let update of updates){\n            const entity = state.entities[update.id];\n            if (!entity) {\n                continue;\n            }\n            appliedUpdates = true;\n            Object.assign(entity, update.changes);\n            const newId = selectId(entity);\n            if (update.id !== newId) {\n                replacedIds = true;\n                delete state.entities[update.id];\n                const oldIndex = state.ids.indexOf(update.id);\n                state.ids[oldIndex] = newId;\n                state.entities[newId] = entity;\n            }\n        }\n        if (appliedUpdates) {\n            mergeFunction(state, [], appliedUpdates, replacedIds);\n        }\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([\n            entity\n        ], state);\n    }\n    function upsertManyMutably(newEntities, state) {\n        const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(newEntities, selectId, state);\n        if (added.length) {\n            addManyMutably(added, state, existingIdsArray);\n        }\n        if (updated.length) {\n            updateManyMutably(updated, state);\n        }\n    }\n    function areArraysEqual(a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < a.length; i++){\n            if (a[i] === b[i]) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    const mergeFunction = (state, addedItems, appliedUpdates, replacedIds)=>{\n        const currentEntities = getCurrent(state.entities);\n        const currentIds = getCurrent(state.ids);\n        const stateEntities = state.entities;\n        let ids = currentIds;\n        if (replacedIds) {\n            ids = new Set(currentIds);\n        }\n        let sortedEntities = [];\n        for (const id of ids){\n            const entity = currentEntities[id];\n            if (entity) {\n                sortedEntities.push(entity);\n            }\n        }\n        const wasPreviouslyEmpty = sortedEntities.length === 0;\n        for (const item of addedItems){\n            stateEntities[selectId(item)] = item;\n            if (!wasPreviouslyEmpty) {\n                insert(sortedEntities, item, comparer);\n            }\n        }\n        if (wasPreviouslyEmpty) {\n            sortedEntities = addedItems.slice().sort(comparer);\n        } else if (appliedUpdates) {\n            sortedEntities.sort(comparer);\n        }\n        const newSortedIds = sortedEntities.map(selectId);\n        if (!areArraysEqual(currentIds, newSortedIds)) {\n            state.ids = newSortedIds;\n        }\n    };\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        setOne: createStateOperator(setOneMutably),\n        setMany: createStateOperator(setManyMutably),\n        setAll: createStateOperator(setAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably)\n    };\n}\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = {\n        sortComparer: false,\n        selectId: (instance)=>instance.id,\n        ...options\n    };\n    const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n    const stateFactory = createInitialStateFactory(stateAdapter);\n    const selectorsFactory = createSelectorsFactory();\n    return {\n        selectId,\n        sortComparer,\n        ...stateFactory,\n        ...selectorsFactory,\n        ...stateAdapter\n    };\n}\n// src/listenerMiddleware/index.ts\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = `task-${cancelled}`;\nvar taskCompleted = `task-${completed}`;\nvar listenerCancelled = `${listener}-${cancelled}`;\nvar listenerCompleted = `${listener}-${completed}`;\nvar TaskAbortError = class {\n    constructor(code){\n        this.name = \"TaskAbortError\";\n        this.code = code;\n        this.message = `${task} ${cancelled} (reason: ${code})`;\n    }\n};\n// src/listenerMiddleware/utils.ts\nvar assertFunction = (func, expected)=>{\n    if (typeof func !== \"function\") {\n        throw new TypeError( false ? 0 : `${expected} is not a function`);\n    }\n};\nvar noop2 = ()=>{};\nvar catchRejection = (promise, onError = noop2)=>{\n    promise.catch(onError);\n    return promise;\n};\nvar addAbortSignalListener = (abortSignal, callback)=>{\n    abortSignal.addEventListener(\"abort\", callback, {\n        once: true\n    });\n    return ()=>abortSignal.removeEventListener(\"abort\", callback);\n};\nvar abortControllerWithReason = (abortController, reason)=>{\n    const signal = abortController.signal;\n    if (signal.aborted) {\n        return;\n    }\n    if (!(\"reason\" in signal)) {\n        Object.defineProperty(signal, \"reason\", {\n            enumerable: true,\n            value: reason,\n            configurable: true,\n            writable: true\n        });\n    }\n    ;\n    abortController.abort(reason);\n};\n// src/listenerMiddleware/task.ts\nvar validateActive = (signal)=>{\n    if (signal.aborted) {\n        const { reason } = signal;\n        throw new TaskAbortError(reason);\n    }\n};\nfunction raceWithSignal(signal, promise) {\n    let cleanup = noop2;\n    return new Promise((resolve, reject)=>{\n        const notifyRejection = ()=>reject(new TaskAbortError(signal.reason));\n        if (signal.aborted) {\n            notifyRejection();\n            return;\n        }\n        cleanup = addAbortSignalListener(signal, notifyRejection);\n        promise.finally(()=>cleanup()).then(resolve, reject);\n    }).finally(()=>{\n        cleanup = noop2;\n    });\n}\nvar runTask = async (task2, cleanUp)=>{\n    try {\n        await Promise.resolve();\n        const value = await task2();\n        return {\n            status: \"ok\",\n            value\n        };\n    } catch (error) {\n        return {\n            status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n            error\n        };\n    } finally{\n        cleanUp?.();\n    }\n};\nvar createPause = (signal)=>{\n    return (promise)=>{\n        return catchRejection(raceWithSignal(signal, promise).then((output)=>{\n            validateActive(signal);\n            return output;\n        }));\n    };\n};\nvar createDelay = (signal)=>{\n    const pause = createPause(signal);\n    return (timeoutMs)=>{\n        return pause(new Promise((resolve)=>setTimeout(resolve, timeoutMs)));\n    };\n};\n// src/listenerMiddleware/index.ts\nvar { assign } = Object;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = (parentAbortSignal, parentBlockingPromises)=>{\n    const linkControllers = (controller)=>addAbortSignalListener(parentAbortSignal, ()=>abortControllerWithReason(controller, parentAbortSignal.reason));\n    return (taskExecutor, opts)=>{\n        assertFunction(taskExecutor, \"taskExecutor\");\n        const childAbortController = new AbortController();\n        linkControllers(childAbortController);\n        const result = runTask(async ()=>{\n            validateActive(parentAbortSignal);\n            validateActive(childAbortController.signal);\n            const result2 = await taskExecutor({\n                pause: createPause(childAbortController.signal),\n                delay: createDelay(childAbortController.signal),\n                signal: childAbortController.signal\n            });\n            validateActive(childAbortController.signal);\n            return result2;\n        }, ()=>abortControllerWithReason(childAbortController, taskCompleted));\n        if (opts?.autoJoin) {\n            parentBlockingPromises.push(result.catch(noop2));\n        }\n        return {\n            result: createPause(parentAbortSignal)(result),\n            cancel () {\n                abortControllerWithReason(childAbortController, taskCancelled);\n            }\n        };\n    };\n};\nvar createTakePattern = (startListening, signal)=>{\n    const take = async (predicate, timeout)=>{\n        validateActive(signal);\n        let unsubscribe = ()=>{};\n        const tuplePromise = new Promise((resolve, reject)=>{\n            let stopListening = startListening({\n                predicate,\n                effect: (action, listenerApi)=>{\n                    listenerApi.unsubscribe();\n                    resolve([\n                        action,\n                        listenerApi.getState(),\n                        listenerApi.getOriginalState()\n                    ]);\n                }\n            });\n            unsubscribe = ()=>{\n                stopListening();\n                reject();\n            };\n        });\n        const promises = [\n            tuplePromise\n        ];\n        if (timeout != null) {\n            promises.push(new Promise((resolve)=>setTimeout(resolve, timeout, null)));\n        }\n        try {\n            const output = await raceWithSignal(signal, Promise.race(promises));\n            validateActive(signal);\n            return output;\n        } finally{\n            unsubscribe();\n        }\n    };\n    return (predicate, timeout)=>catchRejection(take(predicate, timeout));\n};\nvar getListenerEntryPropsFrom = (options)=>{\n    let { type, actionCreator, matcher, predicate, effect } = options;\n    if (type) {\n        predicate = createAction(type).match;\n    } else if (actionCreator) {\n        type = actionCreator.type;\n        predicate = actionCreator.match;\n    } else if (matcher) {\n        predicate = matcher;\n    } else if (predicate) {} else {\n        throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\n    }\n    assertFunction(effect, \"options.listener\");\n    return {\n        predicate,\n        type,\n        effect\n    };\n};\nvar createListenerEntry = /* @__PURE__ */ assign((options)=>{\n    const { type, predicate, effect } = getListenerEntryPropsFrom(options);\n    const entry = {\n        id: nanoid(),\n        effect,\n        type,\n        predicate,\n        pending: /* @__PURE__ */ new Set(),\n        unsubscribe: ()=>{\n            throw new Error( false ? 0 : \"Unsubscribe not initialized\");\n        }\n    };\n    return entry;\n}, {\n    withTypes: ()=>createListenerEntry\n});\nvar findListenerEntry = (listenerMap, options)=>{\n    const { type, effect, predicate } = getListenerEntryPropsFrom(options);\n    return Array.from(listenerMap.values()).find((entry)=>{\n        const matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\n        return matchPredicateOrType && entry.effect === effect;\n    });\n};\nvar cancelActiveListeners = (entry)=>{\n    entry.pending.forEach((controller)=>{\n        abortControllerWithReason(controller, listenerCancelled);\n    });\n};\nvar createClearListenerMiddleware = (listenerMap)=>{\n    return ()=>{\n        listenerMap.forEach(cancelActiveListeners);\n        listenerMap.clear();\n    };\n};\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo)=>{\n    try {\n        errorHandler(errorToNotify, errorInfo);\n    } catch (errorHandlerError) {\n        setTimeout(()=>{\n            throw errorHandlerError;\n        }, 0);\n    }\n};\nvar addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {\n    withTypes: ()=>addListener\n});\nvar clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);\nvar removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {\n    withTypes: ()=>removeListener\n});\nvar defaultErrorHandler = (...args)=>{\n    console.error(`${alm}/error`, ...args);\n};\nvar createListenerMiddleware = (middlewareOptions = {})=>{\n    const listenerMap = /* @__PURE__ */ new Map();\n    const { extra, onError = defaultErrorHandler } = middlewareOptions;\n    assertFunction(onError, \"onError\");\n    const insertEntry = (entry)=>{\n        entry.unsubscribe = ()=>listenerMap.delete(entry.id);\n        listenerMap.set(entry.id, entry);\n        return (cancelOptions)=>{\n            entry.unsubscribe();\n            if (cancelOptions?.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        };\n    };\n    const startListening = (options)=>{\n        const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);\n        return insertEntry(entry);\n    };\n    assign(startListening, {\n        withTypes: ()=>startListening\n    });\n    const stopListening = (options)=>{\n        const entry = findListenerEntry(listenerMap, options);\n        if (entry) {\n            entry.unsubscribe();\n            if (options.cancelActive) {\n                cancelActiveListeners(entry);\n            }\n        }\n        return !!entry;\n    };\n    assign(stopListening, {\n        withTypes: ()=>stopListening\n    });\n    const notifyListener = async (entry, action, api, getOriginalState)=>{\n        const internalTaskController = new AbortController();\n        const take = createTakePattern(startListening, internalTaskController.signal);\n        const autoJoinPromises = [];\n        try {\n            entry.pending.add(internalTaskController);\n            await Promise.resolve(entry.effect(action, // Use assign() rather than ... to avoid extra helper functions added to bundle\n            assign({}, api, {\n                getOriginalState,\n                condition: (predicate, timeout)=>take(predicate, timeout).then(Boolean),\n                take,\n                delay: createDelay(internalTaskController.signal),\n                pause: createPause(internalTaskController.signal),\n                extra,\n                signal: internalTaskController.signal,\n                fork: createFork(internalTaskController.signal, autoJoinPromises),\n                unsubscribe: entry.unsubscribe,\n                subscribe: ()=>{\n                    listenerMap.set(entry.id, entry);\n                },\n                cancelActiveListeners: ()=>{\n                    entry.pending.forEach((controller, _, set)=>{\n                        if (controller !== internalTaskController) {\n                            abortControllerWithReason(controller, listenerCancelled);\n                            set.delete(controller);\n                        }\n                    });\n                },\n                cancel: ()=>{\n                    abortControllerWithReason(internalTaskController, listenerCancelled);\n                    entry.pending.delete(internalTaskController);\n                },\n                throwIfCancelled: ()=>{\n                    validateActive(internalTaskController.signal);\n                }\n            })));\n        } catch (listenerError) {\n            if (!(listenerError instanceof TaskAbortError)) {\n                safelyNotifyError(onError, listenerError, {\n                    raisedBy: \"effect\"\n                });\n            }\n        } finally{\n            await Promise.all(autoJoinPromises);\n            abortControllerWithReason(internalTaskController, listenerCompleted);\n            entry.pending.delete(internalTaskController);\n        }\n    };\n    const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n    const middleware = (api)=>(next)=>(action)=>{\n                if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\n                    return next(action);\n                }\n                if (addListener.match(action)) {\n                    return startListening(action.payload);\n                }\n                if (clearAllListeners.match(action)) {\n                    clearListenerMiddleware();\n                    return;\n                }\n                if (removeListener.match(action)) {\n                    return stopListening(action.payload);\n                }\n                let originalState = api.getState();\n                const getOriginalState = ()=>{\n                    if (originalState === INTERNAL_NIL_TOKEN) {\n                        throw new Error( false ? 0 : `${alm}: getOriginalState can only be called synchronously`);\n                    }\n                    return originalState;\n                };\n                let result;\n                try {\n                    result = next(action);\n                    if (listenerMap.size > 0) {\n                        const currentState = api.getState();\n                        const listenerEntries = Array.from(listenerMap.values());\n                        for (const entry of listenerEntries){\n                            let runListener = false;\n                            try {\n                                runListener = entry.predicate(action, currentState, originalState);\n                            } catch (predicateError) {\n                                runListener = false;\n                                safelyNotifyError(onError, predicateError, {\n                                    raisedBy: \"predicate\"\n                                });\n                            }\n                            if (!runListener) {\n                                continue;\n                            }\n                            notifyListener(entry, action, api, getOriginalState);\n                        }\n                    }\n                } finally{\n                    originalState = INTERNAL_NIL_TOKEN;\n                }\n                return result;\n            };\n    return {\n        middleware,\n        startListening,\n        stopListening,\n        clearListeners: clearListenerMiddleware\n    };\n};\n// src/dynamicMiddleware/index.ts\n\nvar createMiddlewareEntry = (middleware)=>({\n        middleware,\n        applied: /* @__PURE__ */ new Map()\n    });\nvar matchInstance = (instanceId)=>(action)=>action?.meta?.instanceId === instanceId;\nvar createDynamicMiddleware = ()=>{\n    const instanceId = nanoid();\n    const middlewareMap = /* @__PURE__ */ new Map();\n    const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares)=>({\n            payload: middlewares,\n            meta: {\n                instanceId\n            }\n        })), {\n        withTypes: ()=>withMiddleware\n    });\n    const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\n        middlewares.forEach((middleware2)=>{\n            getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\n        });\n    }, {\n        withTypes: ()=>addMiddleware\n    });\n    const getFinalMiddleware = (api)=>{\n        const appliedMiddleware = Array.from(middlewareMap.values()).map((entry)=>getOrInsertComputed(entry.applied, api, entry.middleware));\n        return (0,redux__WEBPACK_IMPORTED_MODULE_0__.compose)(...appliedMiddleware);\n    };\n    const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n    const middleware = (api)=>(next)=>(action)=>{\n                if (isWithMiddleware(action)) {\n                    addMiddleware(...action.payload);\n                    return api.dispatch;\n                }\n                return getFinalMiddleware(api)(next)(action);\n            };\n    return {\n        middleware,\n        addMiddleware,\n        withMiddleware,\n        instanceId\n    };\n};\n// src/combineSlices.ts\n\nvar isSliceLike = (maybeSliceLike)=>\"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\nvar getReducers = (slices)=>slices.flatMap((sliceOrMap)=>isSliceLike(sliceOrMap) ? [\n            [\n                sliceOrMap.reducerPath,\n                sliceOrMap.reducer\n            ]\n        ] : Object.entries(sliceOrMap));\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\nvar isStateProxy = (value)=>!!value && !!value[ORIGINAL_STATE];\nvar stateProxyMap = /* @__PURE__ */ new WeakMap();\nvar createStateProxy = (state, reducerMap, initialStateCache)=>getOrInsertComputed(stateProxyMap, state, ()=>new Proxy(state, {\n            get: (target, prop, receiver)=>{\n                if (prop === ORIGINAL_STATE) return target;\n                const result = Reflect.get(target, prop, receiver);\n                if (typeof result === \"undefined\") {\n                    const cached = initialStateCache[prop];\n                    if (typeof cached !== \"undefined\") return cached;\n                    const reducer = reducerMap[prop];\n                    if (reducer) {\n                        const reducerResult = reducer(void 0, {\n                            type: nanoid()\n                        });\n                        if (typeof reducerResult === \"undefined\") {\n                            throw new Error( false ? 0 : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\n                        }\n                        initialStateCache[prop] = reducerResult;\n                        return reducerResult;\n                    }\n                }\n                return result;\n            }\n        }));\nvar original = (state)=>{\n    if (!isStateProxy(state)) {\n        throw new Error( false ? 0 : \"original must be used on state Proxy\");\n    }\n    return state[ORIGINAL_STATE];\n};\nvar emptyObject = {};\nvar noopReducer = (state = emptyObject)=>state;\nfunction combineSlices(...slices) {\n    const reducerMap = Object.fromEntries(getReducers(slices));\n    const getReducer = ()=>Object.keys(reducerMap).length ? (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap) : noopReducer;\n    let reducer = getReducer();\n    function combinedReducer(state, action) {\n        return reducer(state, action);\n    }\n    combinedReducer.withLazyLoadedSlices = ()=>combinedReducer;\n    const initialStateCache = {};\n    const inject = (slice, config = {})=>{\n        const { reducerPath, reducer: reducerToInject } = slice;\n        const currentReducer = reducerMap[reducerPath];\n        if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n            if (typeof process !== \"undefined\" && \"development\" === \"development\") {\n                console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n            }\n            return combinedReducer;\n        }\n        if (config.overrideExisting && currentReducer !== reducerToInject) {\n            delete initialStateCache[reducerPath];\n        }\n        reducerMap[reducerPath] = reducerToInject;\n        reducer = getReducer();\n        return combinedReducer;\n    };\n    const selector = Object.assign(function makeSelector(selectorFn, selectState) {\n        return function selector2(state, ...args) {\n            return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap, initialStateCache), ...args);\n        };\n    }, {\n        original\n    });\n    return Object.assign(combinedReducer, {\n        inject,\n        selector\n    });\n}\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n    return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\n}\n //# sourceMappingURL=redux-toolkit.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;